<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="cellmonitor_demo_android">
        <name>Cell monitor Android</name>
        <description>Cell monitor demo app for Android</description>
        <details>
            <![CDATA[
This simple Android app illustrates time-series data collection using cell tower parameters (operator code, name, cell ID, signal strength, etc.), and the phone GPS location.

<h2>Installation</h2>
Download the .apk to your Android device by clicking the "Binary" button on the left. Make sure that the device permits installing apps from "Unknown sources". Open the downloaded apk and follow the on-screen instructions.

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. By opening the "Cell monitor Android" demo, you will see the latest data that the application sends to the Kaa Sandbox server.<br/><br/>

Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and go to the "Cell monitor" application, then select "Schemas", "Log". Choose the latest schema version to inspect the schema of the data collected from the app.<br/><br/>

In this demo application, the data is collected into a MongoDB instance. To review the configuration of the active log appender, browse to the "Log appenders" section under the "Cell monitor" application, and choose "Cell monitor log appender" from the table. You can explore the collected data by querying the Sandbox MongoDB instance as follows:
<pre>
$ mongo kaa
db.logs_$your_application_token$.find()
</pre>

Where $your_application_token$ is the application token you can copy from the main window of the application in the Administration UI.<br/><br/>

<h2>What's next?</h2>

For more background on the Kaa Logging subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>ANDROID</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>REGULAR</complexity>
        <bundleId>cell_monitor_demos</bundleId>
        <sourceArchive>android/cellmonitor_demo.tar.gz</sourceArchive>
        <projectFolder>cellmonitor_demo/CellMonitor</projectFolder>
        <sdkLibDir>cellmonitor_demo/CellMonitor/libs</sdkLibDir>
        <destBinaryFile>cellmonitor_demo/CellMonitor/bin/CellMonitor-debug.apk</destBinaryFile>
    </project>
    <project id="cellmonitor_demo_objc">
        <name>Cell monitor iOS</name>
        <description>Cell monitor demo app for iOS</description>
        <details>
            <![CDATA[
This simple iOS app illustrates time-series data collection using cell tower parameters (operator code, name, signal strength, etc.), and the phone GPS location.

<h2>Installation</h2>

Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. By opening the "Cell monitor iOS" demo, you will see the latest data that the application sends to the Kaa Sandbox server.<br/><br/>

Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and go to the "Cell monitor" application, then select "Schemas", "Log". Choose the latest schema version to inspect the schema of the data collected from the app.<br/><br/>

In this demo application, the data is collected into a MongoDB instance. To review the configuration of the active log appender, browse to the "Log appenders" section under the "Cell monitor" application, and choose "Cell monitor log appender" from the table. You can explore the collected data by querying the Sandbox MongoDB instance as follows:
<pre>
$ mongo kaa
db.logs_$your_application_token$.find()
</pre>

Where $your_application_token$ is the application token you can copy from the main window of the application in the Administration UI.<br/><br/>

<h2>What's next?</h2>

For more background on the Kaa Logging subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>REGULAR</complexity>
        <bundleId>cell_monitor_demos</bundleId>
        <sourceArchive>objc/cellmonitor_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCCellMonitor</projectFolder>
        <sdkLibDir>ObjCCellMonitor/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="cell_monitor_demos">
        <name>Cell Monitor demos</name>
        <description>Kaa Log collection subsystem demo applications bundle</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrates capabilities of the Kaa Log collection subsystem.

Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.

<h2>What's next?</h2>
For more background on the Kaa Logging subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Collecting+data+from+endpoints">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Logging">design reference</a> sections.
]]>
        </details>
    </bundle>
</projectsConfig>
