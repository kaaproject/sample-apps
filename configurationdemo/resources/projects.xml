<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig
        xmlns="http://www.kaaproject.org"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="configuration_demo_java">
        <name>Configuration Java demo</name>
        <description>Kaa Configuration subsystem demo app based on Java SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <b>Configuration extension</b> based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa Java SDK</a>.
	This extension enables <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> to update the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> configuration by receiving the data from <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>.
</p>

<p>
	The default configuration is statically stored in the Kaa SDK and is used in case no updates from the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#operations-service" target="_blank">Operations service</a> are available.
	The latest configuration is stored locally in the configuration storage using <code>kaaClient.setConfigurationStorage( ... )</code> API call and can be obtained regardless of the Operations service availability.
	This sample application stores the configuration in the saved_config.cfg file located in the sample application working directory.
</p>

<p>
	This sample application also includes a configuration update listener triggered by <code>kaaClient.addConfigurationListener( ... )</code> API call to receive latest configuration update as soon as it becomes available.
</p>

<h1>Launching</h1>

<p>
	To launch this sample application on the Kaa Java SDK, you need to prepare your Java SDK environment.
	To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Using Kaa endpoint SDKs</a>.
</p>

<p>
	For sample applications that utilize Kaa Java SDK, both the binary files (.jar archive) and the source code (.tar.gz archive) are available for download.
	If you want to only launch the sample application, download the binary files.
	If you want to explore the source code of the sample application, download the source code archive.
</p>

<h2>Install using the binary files</h2>

To install the Configuration sample application using the binary files:
	
<ol>
	<li>
		Click the <b>Binary</b> button.
		A binary build window will open.
		Click <b>Ok</b> and download the .jar file.
	</li>
	<li>
		Run the following command from the directory containing the downloaded .jar archive.
		
		<pre>
			$ java -jar ConfigurationDemo.jar
		</pre>
		
		The sample application console will show the following messages.
		
		<pre>
			[main] INFO  o.k.k.d.c.ConfigurationDemo - Configuration demo started
			[main] INFO  o.k.k.d.c.ConfigurationDemo - Endpoint ID: sObsTu7g696tYc2wBpIYtO9NQgk=
			[pool-4-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Getting sampling period value from default configuration
			[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 1 seconds
			[pool-4-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Configuration was updated
			[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 10 seconds
			[main] INFO  o.k.k.d.c.ConfigurationDemo - --= Press any key to exit =--=
		</pre>
		
	</li>
</ol>

<h2>Install using the source code</h2>

To install the Configuration sample application using the source code:

<ol>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		To build from new sources, you need to have the <a href="http://ant.apache.org/" target="_blank">Apache Ant</a> installed on your host machine.
		To install Apache Ant, run the following command from the directory containing the unpacked sources.
		
		<pre>
			$ ant debug
		</pre>
		
		To launch the sample application from the previously built sources run the following command from the directory containing the sources.
		
		<pre>
			$ java -jar build/jar/ConfigurationDemo.jar
		</pre>
	</li>
</ol>
	
If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>JAVA</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>CONFIGURATION</features>
        <complexity>BASIC</complexity>
        <bundleId>configuration_demos</bundleId>
        <sourceArchive>java/configuration_demo.tar.gz</sourceArchive>
        <projectFolder>JConfigurationDemo</projectFolder>
        <sdkLibDir>JConfigurationDemo/lib</sdkLibDir>
        <destBinaryFile>JConfigurationDemo/build/jar/ConfigurationDemo.jar</destBinaryFile>
    </project>
    <project id="configuration_demo_c">
        <name>Configuration C demo</name>
        <description>Kaa Configuration subsystem demo app based on C SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <b>Configuration extension</b> based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa C SDK</a>.
	This extension enables <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> to update the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> configuration by receiving the data from <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>.
	The default configuration is statically stored in the Kaa SDK and is used in case no updates from the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#operations-service" target="_blank">Operations service</a> are available.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C SDK:

<ol>
	<li>
		Prepare your C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/latest/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">Using Kaa C SDK</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		Unpack the SDK archive.
        <pre>
            tar -zxf libs/kaa/kaa* -C libs/kaa
        </pre>
	</li>
	<li>
        Execute the following script:
        (Note this should be copy-pasted to the terminal all at once)
        <pre>
            mkdir -p build \
            && cd build \
            && cmake .. \
            && make
        </pre>
        By default the project is generated for Posix target.
        To generate and build project for other supported targets,
        refer to the <a href="http://kaaproject.github.io/kaa/docs/latest/Programming-guide/Using-Kaa-endpoint-SDKs/" target="_blank">documentation pages</a>.
    </li>
    <li>
        To run demo, execute:
        <pre>
            ./build/demo_client
        </pre>
    </li>
</ol>

<h1>Troubleshooting</h1>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">C SDK installation instructions</a>.
</p>
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>C</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86 CC32XX ESP8266</platforms>
        <features>CONFIGURATION</features>
        <complexity>BASIC</complexity>
        <bundleId>configuration_demos</bundleId>
        <sourceArchive>c/configuration_demo.tar.gz</sourceArchive>
        <projectFolder>CConfigurationDemo</projectFolder>
        <sdkLibDir>CConfigurationDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="configuration_demo_cpp">
        <name>Configuration C++ demo</name>
        <description>Kaa Configuration subsystem demo app based on C++ SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <b>Configuration extension</b> based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa C++ SDK</a>.
	This extension enables <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> to update the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> configuration by receiving the data from <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>.
	The default configuration is statically stored in the Kaa SDK and is used in case no updates from the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#operations-service" target="_blank">Operations service</a> are available.
	The latest configuration is stored locally in the configuration storage and can be obtained regardless of the Operations service availability.
	This sample application stores the configuration in the saved_config.cfg file located in the sample application working directory.
	</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C++ SDK:

<ol>
	<li>
		Prepare your C++ SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/latest/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">Using Kaa C++ SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		Unpack the SDK archive.
        <pre>
            tar -zxf libs/kaa/kaa* -C libs/kaa
        </pre>
	</li>
	<li>
		Run the following commands:
		<p>
			<b>Windows</b>
			<pre>
				mkdir build
				cd build
				cmake -G "Nmake Makefiles" ..
				nmake
			</pre>
		</p>
		<p>
			<b>Linux, OS X (macOS)</b>
			<pre>
				mkdir build \
				&& cd build
				&& cmake .. \
				&& make
			</pre>
            By default the project is generated for Posix target.
            To generate and build project for other supported targets,
            refer to the <a href="http://kaaproject.github.io/kaa/docs/latest/Programming-guide/Using-Kaa-endpoint-SDKs/" target="_blank">documentation pages</a>.
		</p>
	</li>
    <li>
        To run demo, execute:
		<p>
            <b>Windows</b>
            <pre>
                build/demo_client.exe
            </pre>
		</p>
		<p>
			<b>Linux</b>
            <pre>
                ./build/demo_client
            </pre>
		</p>
    </li>
</ol>

<h1>Troubleshooting</h1>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">C++ SDK installation instructions</a>.
</p>

<h2>Error during compilation</h2>

<pre>
	c++: Internal compiler error: Killed (program cc1plus)
</pre>

<p>
	This error can occur due to insufficient memory available to the compiler.
	By default, the sample applications and SDK based on C++ are compiled using the four-threaded parallelism mode.
	This may cause failures on low-performance systems.
</p>

<p>
	Try restarting your build in the single-threaded mode. Run the <code>make</code> command from the <i>build</i> directory of the sample application.
</p>
            ]]>
        </details>


        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>CPP</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86</platforms>
        <features>CONFIGURATION</features>
        <complexity>BASIC</complexity>
        <bundleId>configuration_demos</bundleId>
        <sourceArchive>cpp/configuration_demo.tar.gz</sourceArchive>
        <projectFolder>CppConfigurationDemo</projectFolder>
        <sdkLibDir>CppConfigurationDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="configuration_demo_objc">
        <name>Configuration Objective-C demo</name>
        <description>Kaa Configuration subsystem demo app based on Objective-C SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <b>Configuration extension</b> based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa Objective-C SDK</a>.
	This extension enables <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> to update the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> configuration by receiving the data from <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>.
</p>

<p>
	The application first sets up the path to save the configuration file to.
	<br />
	The generated path is then transferred to the initializer of <code>SimpleConfigurationStorage</code> and a <code>ViewController</code> instance is added to the <code>ConfigurationDelegate</code> list with the <code>addConfigurationDelegate:</code> function.
</p>

<p>
	When the client starts, the <code>getConfiguration</code> method returns the latest version of the configuration.
	<br />
	For the demonstration purposes, the <code>ConfigurationDelegate</code> list includes the <b>self</b> parameter so that every time the configuration changes, the delegate will receive the updated configuration to the <code>onConfigurationUpdate:</code> method.
</p>

<h1>Launching</h1>

<p>
	Before launching the application, make sure you have the latest version of xCode and CocoaPods installed.
</p>

To launch this sample application on the Kaa Objective-C SDK:

<ol>
	<li>
		Prepare your Objective-C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Objective-C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		
		<pre>
			sh build.sh
		</pre>
		
		The build script will extract the Kaa SDK, install dependencies with CocoaPods and build the SDK.
        <blockquote>NOTE: The build script will also install CocoaPods master repository, which may take a few minutes.</blockquote>
	</li>
	<li>
		Open the ConfigurationDemo.xcodeproj file and click the <b>Play</b> button.
		You should see the following console messages.
		
		<pre>
			2016-08-02 10:25:55.131 ConfigurationDemo[29486:7687014] ConfigurationDemo started
			2016-08-02 10:25:55.155 ConfigurationDemo[29486:7687534] Kaa client started
			2016-08-02 10:25:55.157 ConfigurationDemo[29486:7687534] Endpoint ID: 8cnSqxdiSjmkGbNdy5kC9hJIumE=
			2016-08-02 10:25:55.157 ConfigurationDemo[29486:7687534] Configuration before updating
			2016-08-02 10:25:55.158 ConfigurationDemo[29486:7687534] Sampling period is 1
		</pre>
		
	</li>
</ol>

If you have not yet updated your configuration, the sampling period will be set to <b>1</b> as this is the default value in the sample application schema.

<h1>Troubleshooting</h1>

<h2>Running the build script returns an error message</h2>

<pre>
	[!] Invalid `Podfile` file: [!] Unsupported options `{:exclusive=>true}` for target `KaaTests`.
</pre>

<p>
	This error can occur when using newer than version 1.0 of Cocoapods.
</p>

Try the following:

<ol>
	<li>
		Run the following command from the ./libs/kaa-ep-sdk/ folder.
		
		<pre>
			vim Podfile
		</pre>
		
	</li>
	<li>
		Delete <b>:exclusive=>true</b>.
	</li>
	<li>
		Run this command.
		
		<pre>
			pod install
		</pre>
		
	</li>
</ol>

Now you can open the ConfigurationDemo.xcodeproj file and run the build script.

<h2>Nothing happens after the "Build succeeded" message</h2>

Make sure that the build target is set to <b>ConfigurationDemo</b>, not <b>Kaa</b>.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>CONFIGURATION</features>
        <complexity>BASIC</complexity>
        <bundleId>configuration_demos</bundleId>
        <sourceArchive>objc/configuration_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCConfigurationDemo</projectFolder>
        <sdkLibDir>ObjCConfigurationDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="configuration_demos">
        <name>Configuration demos</name>
        <description>Kaa Configuration subsystem demo applications bundle</description>
        <details>
            <![CDATA[
<p>	
	This application bundle demonstrates the features of the Kaa <b>Configuration extension</b>.
	This extension allows you to configure the sampling period of your <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> sensor.
	To do this, you need to configure settings in the Kaa <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sandbox" target="_blank">Sandbox</a>.
	The settings will take effect after the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> of your endpoint device receives them from the Kaa Sandbox.
</p>	
<p>		
	Configuration settings are vital to any device. Your endpoint device is preprogrammed with a default configuration.
	Using this Configuration extension, you can register on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> and get a configuration update.
	You can manage configuration settings in the Kaa client of your endpoint device by making the necessary changes in the Sandbox.
	When both the endpoint and Sandbox are online, you can change your configuration settings on the fly.
	When either Sandbox or the endpoint is offline, the Kaa client stores the last known settings locally.
	This is useful when you need to restart your device, or when there is an unexpected power outage, etc.
</p>
<p>
	Using Kaa Sandbox, you can flexibly manage a number of endpoint devices. You can store multiple endpoint groups and manage their settings separately.
	You can select a <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-group" target="_blank">group of endpoint devices</a> using filter parameters.
</p>

<h1>Playing around</h1>

<p>
	To control the sampling period of a sensor, Kaa client uses the following configuration schema.
</p>

<pre>
	{
		"type": "record",
		"name": "Configuration",
		"namespace": "org.kaaproject.kaa.schema.sample",
		"fields": [
			{
				"name": "samplingPeriod",
				"type": "int",
				"by_default": "1"
			}
		]
	}
</pre>

<p>
	In the example above, there is a default value specified for the sampling period.
	This default configuration value is used by the Kaa client and <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-sdk" target="_blank">SDK of the endpoint device</a>.
	This means no connection to the server is required for your initial configuration.
</p>
<p>
	To verify this, download the binaries/sources for the target platform and start the application.
	To do this, choose the target platform below and follow the instructions on the dedicated page.
</p>
<p>
	When Kaa client starts, it will display following messages.
</p>

<pre>
	[main] INFO  o.k.k.d.c.ConfigurationDemo - Configuration demo started
	[main] INFO  o.k.k.d.c.ConfigurationDemo - Endpoint ID: sObsTu7g696tYc2wBpIYtO9NQgk=
	[pool-4-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Getting sampling period value from default configuration
	[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 1 second
	[pool-4-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Configuration was updated
	[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 10 seconds
	[main] INFO  o.k.k.d.c.ConfigurationDemo - --= Press any key to exit =--
</pre>

<p>
	The messages above inform the user that Kaa client first applied the default value received from the SDK and the then updated it with the new value received from the server.
	When Kaa client starts, it connects to the server and receives new configuration from the default, non-editable <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#group-all" target="_blank">group <i>all</i></a>.
	For demonstration purpose, this group includes an <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-profile-client-side-server-side" target="_blank">endpoint profile</a> with <i>samplingPeriod</i> set to 10.
</p>

<pre>
	{
	  "samplingPeriod" : 10
	}
</pre>

<h2>Change sampling period</h2>

To change the sampling period:

<ol>
	<li>
		Click the <b>Administration UI</b> button, enter username <b>devuser</b> and password <b>devuser123</b>.
	</li>
	<li>
		Click the <b>Applications</b> arrow to unfold the list.
		Click the <b>Configuration demo</b> arrow to unfold the next list and select <b>Endpoint groups</b>.
		You will see the list of all groups that your endpoint belongs to.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_2.png?raw=true" />
		<br />
		<br />
		
	</li>
	<li>
		Select the group <b>All</b> by clicking the corresponding row.
		The <b>Endpoint group details</b> page will open.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_3.png" />
		<br />
		<br />
		
	</li>
	<li>
		In the <b>Configurations</b> section, select the latest version schema (the <b>Configuration schema</b> column).
		The <b>Configuration details</b> page will open.
	</li>
	<li>
		Select the <b>Draft</b> tab and enter a new <i>samplingPeriod</i> value.
	
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_4.png" />
		<br />
		<br />
		
	</li>	
	<li>
		Click <b>Save</b> to save the changes, then click <b>Activate</b> to activate the configuration.
	
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_5.png" />
		<br />
		<br />
		
	</li>
</ol>

<p>
	Kaa client will notify you about successful configuration update and the new sampling period value.
</p>

<pre>
	[pool-4-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Configuration was updated
	[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 144 seconds
</pre>

<p>
	If you now shut down your Kaa client and the Sandbox, and then restart Kaa client, the last known configuration value will be displayed in the console.
</p>

<pre>
	[main] INFO  o.k.k.d.c.ConfigurationDemo - Configuration demo started
	[main] INFO  o.k.k.d.c.ConfigurationDemo - Endpoint ID: sObsTu7g696tYc2wBpIYtO9NQgk=
	[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 144 seconds
	...
	[pool-1-thread-1] WARN  o.k.k.c.c.impl.DefaultChannelManager - Attempt to connect to the next bootstrap server will be made in 2000 ms, according to failover strategy decision
	[pool-1-thread-1] WARN  o.k.k.c.b.DefaultBootstrapManager - Trying to switch to the next bootstrap server according to failover strategy decision
	...
</pre>

<h2>Add endpoint profiles and groups</h2>

<p>
	You can add new endpoint groups and profiles. This allows you to manage your endpoint devices more effectively.
	For example, some of your sensors require checking their readings every second, and some other - every 300 seconds.
	To manage them separately, you can create two groups of sensors and set up an individual <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#profile-filter" target="_blank">profile filter</a> for each group.
	To do this, you need to create a configuration schema and then create a group to be managed in accordance with that schema.
	For this purpose, you can create a new configuration schema that looks like this.
</p>

<pre>
	{
	  "type" : "record",
	  "name" : "SamplingServerSideSchema",
	  "namespace" : "org.kaaproject.kaa.schema.sample",
	  "fields" : [ {
		"name" : "enableDetailedSampling",
		"type" : "boolean"
	  } ],
	  "displayName" : "Sampling server side schema",
	  "description" : ""
	}
</pre>

<p>
	This example schema contains only one boolean field <i>enableDetailedSampling</i>.
	The value of this field will control the sampling period for your endpoint device.
</p>

	To create a new configuration schema:

<ol>
	<li>
		Start the Sandbox and click <b>Administration UI</b> > <b>Applications</b> > <b>Configuration demo</b> > <b>Schemas</b> > <b>Server-side EP profile</b>.
		Click the <b>Add schema</b> button.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_6.png" />
		<br />
		<br />
		
	</li>
	<li>
		Enter a name and description (optional) for your new schema.
		You can create a new type of server-side profile schema or use an existing one.
		For more information, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Common-Type-Library/" target="_blank">Common Type Library (CTL)</a>.
		Click <b>Create new type</b>.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_7.png" />
		<br />
		<br />
		
	</li>
	<li>
		A new page will open, where you can create a new type for your schema using the <b>Fields</b> section, or upload a .json file containing the schema.
		After you created or uploaded a new schema, click <b>Add</b>.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_8.png" />
		<br />
		<br />
		
		Your new schema is now in the <b>Server-side EP profiles</b> list.
	</li>
</ol>

To create a new endpoint group:

<ol>	
	<li>
		On the <b>Administration UI</b> page, click <b>Applications</b> > <b>Configuration demo</b> > <b>Endpoint groups</b>.
		Click the <b>Add endpoint group</b> button.
	</li>
	<li>
		Enter a name, weight, and description (optional) for your new endpoint group, and click <b>Add</b>.
		For more information, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-groups" target="_blank">Endpoint groups</a>.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_9.png" />
		<br />
		<br />
		
	</li>
	<li>
		Your endpoint group will be saved, and the <b>Endpoint group details</b> page will open automatically.
		On this page, you can add profile filters, configurations, and notification topics.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_10.png" />
		<br />
		<br />
		
	</li>	
</ol>
	
<h2>Add profile filters and configurations</h2>

To create an endpoint profile filter:

<ol>	
	<li>
		On the <b>Administration UI</b> page, click <b>Applications</b> > <b>Configuration demo</b> > <b>Endpoint groups</b>.
		Select the group by clicking the corresponding row.
		The <b>Endpoint group details</b> page will open.
	</li>
	<li>
		Click the <b>Add profile filter</b> button under the <b>Profile filters</b> section.
		The <b>Profile filter details</b> page will open.
	</li>
	<li>
		Select corresponding version of the Server-side EP profile schema.
	
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_11.png" />
		<br />
		<br />
		
	</li>
	<li>
		Copy the line below and paste it into the <b>Filter body</b> field of the <b>Draft</b> tab.
	</li>
	
		<pre>
			#sp.enableDetailedSampling == true
		</pre>
	
	<li>
		Click <b>Activate</b>.
		The filter is now applied to the group.
	</li>
</ol>

To add a group configuration:

<ol>	
	<li>
		On the <b>Administration UI</b> page, click <b>Applications</b> > <b>Configuration demo</b> > <b>Endpoint groups</b>.
		Select the group by clicking the corresponding row.
		The <b>Endpoint group details</b> page will open.
	</li>
	<li>
		Click the <b>Add configuration</b> button under the <b>Configurations</b> section.
		The <b>Configuration details</b> page will open.
	</li>
	<li>
		Select the configuration schema version (in our case, it is version 2).
		Enter a new value for sampling period (3 seconds), click <b>Save</b>, then click <b>Activate</b>.
		Now, every endpoint included in this group will have the sampling period value set to 3 seconds.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_12.png" />
		<br />
		<br />
		
	</li>
</ol>

To see the list of all endpoints registered in your <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-application" target="_blank">application</a>, click <b>Applications</b> > <b>Configuration demo</b> > <b>Endpoint profiles</b>.

<br />
<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_13.png" />
<br />

<p>
	Click the endpoint profile with the <b>endpointKeyHash</b> value that you saw in the Kaa client logs.
	The <b>Endpoint profile details</b> page will open.
	Here you can edit the server-side profile of the endpoint.
</p>

<blockquote>NOTE: Kaa client must be running while you edit the server-side profile.</blockquote>

Click <b>Edit</b> and enable the <b>enableDetailedSampling</b> option.

<br />
<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_14.png" />
<br />

<br />
<img src="https://raw.github.com/hunch7/sample-apps/app_description/configurationdemo/resources/pic/config_demo_15.png" />
<br />

Kaa client will output the message below.

<pre>
	...
	[pool-4-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Configuration was updated
	[pool-2-thread-1] INFO  o.k.k.d.c.ConfigurationDemo - Sampling period is now set to 3 seconds
</pre>

This means that your endpoint now belongs to the new group you created. To see the list of groups , click <b>Administration UI</b> > <b>Applications</b> > <b>Configuration demo</b> > <b>Endpoint groups</b>.

<h1>What’s next?</h1>

For more information, see:

<ul>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-profiles/" target="_blank">Endpoint profiles</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-groups/" target="_blank">Endpoint groups</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Configuration-management/" target="_blank">Configuration management</a>.
	</li>
</ul>
            ]]>
        </details>
    </bundle>
</projectsConfig>
