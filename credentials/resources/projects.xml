<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="credentials_demo_java">
        <name>Credentials Java Client demo</name>
        <description>Kaa Credentials management demo client app based on Java SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the server-side <b>Credentials management</b> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa Java SDK</a>.
</p>

The sample application uses the following methods to manage credentials:

<ul>
	<li>
		<code>getEndpointKeyHash</code> method is used to retrieve the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> data used for connection to the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>.
	</li>
	<li>
		<code>DefaultFailoverStrategy</code> class manages the application behavior when an error occurs outside the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">Kaa client</a>.
		For example, when no Bootstrap service or Operations service is found, no Internet connection, error while validating the endpoint credentials, etc.
	</li>
</ul>

<h1>Launching</h1>

<p>
	To launch this sample application on the Kaa Java SDK, you need to prepare your Java SDK environment.
	To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Using Kaa endpoint SDKs</a>.
</p>

<p>
	For sample applications that utilize Kaa Java SDK, both the binary files (.jar archive) and the source code (.tar.gz archive) are available for download.
	If you want to only launch the sample application, download the binary files.
	If you want to explore the source code of the sample application, download the source code archive.
</p>

<h2>Install using the binary files</h2>

To install the Credentials management sample application using the binary files:
	
<ol>
	<li>
		Click the <b>Binary</b> button.
		A binary build window will open.
		Click <b>Ok</b> and download the .jar file.
	</li>
	<li>
		Run the following command from the directory containing the downloaded .jar archive.
		
<pre>
$ java -jar JCredentialsDemo.jar
</pre>
		
		The sample application console will display the startup message.
								
	</li>
</ol>

<h2>Install using the source code</h2>

To install the Credentials management sample application using the source code:

<ol>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		To build from new sources, you need to have the <a href="http://ant.apache.org/" target="_blank">Apache Ant</a> installed on your host machine.
		To install Apache Ant, run the following command from the directory containing the unpacked sources.
		
<pre>
$ ant debug
</pre>
		
		To launch the sample application from the previously built sources run the following command from the directory containing the sources.
		
<pre>
$ java -jar build/jar/JCredentialsDemo.jar
</pre>
	</li>
</ol>
	
If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
			]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>CREDENTIALS</features>
        <complexity>BASIC</complexity>
        <bundleId>credentials_demos</bundleId>
        <sourceArchive>java/credentials_demo.tar.gz</sourceArchive>
        <projectFolder>JCredentialsDemo</projectFolder>
        <sdkLibDir>JCredentialsDemo/lib</sdkLibDir>
        <destBinaryFile>JCredentialsDemo/build/jar/JCredentialsDemo.jar</destBinaryFile>
    </project>


    <project id="credentials_demo_java_admin">
        <name>Credentials Java Admin demo</name>
        <description>Kaa Credentials management admin demo app based on Kaa REST calls (wrapped with AdminClient class)</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the server-side <b>Credentials management</b> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Kaa Java SDK</a>.
</p>

The sample application uses the following methods of <b>org.kaaproject.kaa.server.common.admin.AdminClient</b> and other classes to manage credentials:

<ul>
	<li>
		<code><b>java.security.KeyPairGenerator.genKeyPair()</b></code> method to generate new key pair for the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a>.
	</li>
	 data used for connection to the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>
	<li>
		<code><b>AdminClient.provisionCredentials()</b></code> method to provision endpoint credentials by application token and public key.
	</li>
	<li>
		<code><b>AdminClient.revokeCredentials()</b></code> method to revoke (deactivate) endpoint credentials by application token and endpoint ID.
	</li>
	<li>
		<code><b>AdminClient.getCredentialsStatus()</b></code> method to check endpoint credentials status by application token and endpoint ID.
	</li>
</ul>

<h1>Launching</h1>

<p>
	To launch this sample application on the Kaa Java SDK, you need to prepare your Java SDK environment.
	To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Using Kaa endpoint SDKs</a>.
</p>

<p>
	For demo applications that utilize Kaa Java SDK, both the binary files (.jar archive) and the source code (.tar.gz archive) are available for download.
	If you want to only launch the demo application, download the binary files.
	If you want to explore the source code of the demo application, download the source code archive.
</p>

<h2>Launch using the binary files</h2>

To install the Credentials management sample application using the binary files:

<ol>
	<li>
		Click the <b>Binary</b> button.
		A binary build window will open.
		Click <b>Ok</b> and download the <b>*.jar</b> file.
	</li>
	<li>
		Run the following command from the directory containing the downloaded <b>*.jar</b> archive.

<pre>
$ java -jar JCredentialsAdminDemo.jar
</pre>

		The sample application console will display the startup message.

	</li>
</ol>

<h2>Launch using the source code</h2>

To install the Credentials management sample application using the source code:

<ol>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the <b>*.tar.gz</b> file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		To build from new sources, you need to have the <a href="http://ant.apache.org/" target="_blank">Apache Ant</a> installed on your host machine.
		To install Apache Ant, run the following command from the directory containing the unpacked sources.

<pre>
$ ant debug
</pre>

		To launch the sample application from the previously built sources run the following command from the directory containing the sources.

<pre>
$ java -jar build/jar/JCredentialsAdminDemo.jar
</pre>
	</li>
</ol>

If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
			]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>JAVA</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>CREDENTIALS</features>
        <complexity>BASIC</complexity>
        <bundleId>credentials_demos</bundleId>
        <sourceArchive>java-admin/credentials_demo.tar.gz</sourceArchive>
        <projectFolder>JCredentialsAdminDemo</projectFolder>
        <sdkLibDir>JCredentialsAdminDemo/lib</sdkLibDir>
        <destBinaryFile>JCredentialsAdminDemo/build/jar/JCredentialsAdminDemo.jar</destBinaryFile>
    </project>


    <project id="credentials_demo_cpp">
        <name>Credentials C++ demo</name>
        <description>Kaa Credentials management demo app based on C++ SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the server-side <b>Credentials management</b> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa C++ SDK</a>.
	This feature is used to connect to <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> and authorize the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> upon <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> startup.
</p>

<p>
	To handle cases when the endpoint credentials are invalid or revoked, you can use the <code>IKaaClient::setFailoverStrategy()</code> method to specify a failover strategy.
	The <code>FailoverStrategy</code> class is based on the SDK-defined <code>DefaultFailoverStrategy</code> class and overrides the <code>onFailover</code> method that returns the <code>FailoverStrategyDecision</code> class (<code>StopClient</code> in this case).
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C++ SDK:

<ol>
	<li>
		Prepare your C++ SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		Unpack the SDK archive.
<pre>
tar -zxf libs/kaa/kaa* -C libs/kaa
</pre>
	</li>
	<li>
		Install CMake.
        To do this, run the following commands (copy and paste them to the terminal all at once).
		<p>
			<b>Windows</b>
<pre>
mkdir build
cd build
cmake -G "Nmake Makefiles" ..
nmake
</pre>
		</p>
		<p>
			<b>Linux, OS X (macOS)</b>
<pre>
mkdir build \
&& cd build
&& cmake .. \
&& make
</pre>
            By default, the project is generated for POSIX platform.
            To build a project for other supported platforms, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/" target="_blank">Using Kaa endpoint SDKs</a>.
		</p>
	</li>
    <li>
        Run your sample application.
		<p>
            <b>Windows</b>
<pre>
build/demo_client.exe
</pre>
		</p>
		<p>
			<b>Linux</b>
<pre>
./build/demo_client
</pre>
		</p>
    </li>
</ol>

<h1>Troubleshooting</h1>

<h2>CMake returns an error message</h2>

<pre>
CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">C++ SDK installation instructions</a>.
</p>
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>CPP</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>CREDENTIALS</features>
        <complexity>BASIC</complexity>
        <bundleId>credentials_demos</bundleId>
        <sourceArchive>cpp/credentials_demo.tar.gz</sourceArchive>
        <projectFolder>CppCredentialsDemo</projectFolder>
        <sdkLibDir>CppCredentialsDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>


    <project id="credentials_demo_c">
        <name>Credentials C demo</name>
        <description>Kaa Credentials management demo app based on C SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the server-side <b>Credentials management</b> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa C SDK</a>.
	This feature is used to connect to <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> and authorize the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> upon <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> startup.
</p>

<p>
	To handle cases when the endpoint credentials are invalid or revoked, you can use the <code>kaa_set_auth_faliure_handler()</code> method.
	It allows you to set a callback triggered by authorization failure.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C SDK:

<ol>
	<li>
		Prepare your C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the SDK archive.
<pre>
tar -zxf libs/kaa/kaa* -C libs/kaa
</pre>
	</li>
	<li>
        Install CMake.
        To do this, run the following commands (copy and paste them to the terminal all at once).
<pre>
mkdir -p build \
&& cd build \
&& cmake .. \
&& make
</pre>
        By default, the project is generated for POSIX platform.
        To build a project for other supported platforms, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/" target="_blank">Using Kaa endpoint SDKs</a>.
    </li>
    <li>
        Run your sample application.
<pre>
./build/demo_client
</pre>
    </li>
</ol>

<h1>Troubleshooting</h1>

<h2>CMake returns an error message</h2>

<pre>
CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">C SDK installation instructions</a>.
</p>
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>C</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86</platforms>
        <features>CREDENTIALS</features>
        <complexity>BASIC</complexity>
        <bundleId>credentials_demos</bundleId>
        <sourceArchive>c/credentials_demo.tar.gz</sourceArchive>
        <projectFolder>CCredentialsDemo</projectFolder>
        <sdkLibDir>CCredentialsDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>


    <project id="credentials_demo_objc">
        <name>Credentials Objective-C demo</name>
        <description>Kaa Credentials subsystem demo app based on Objective-C SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the server-side <b>Credentials management</b> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa Objective-C SDK</a>.
	This feature is used to connect to <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> and authorize the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a> upon <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> startup.
</p>

<p>
	The sample application uses the following API call methods:
	
	<ul>
		<li>
			<code>clientWithContext:stateDelegate:</code> method creates Kaa client with default key generation strategy (autogenerated keys).
		</li>
		<li>
			<code>clientWithContext:stateDelegate:autoGeneratedKeys:</code> method creates Kaa client without ability to generate keys.
			Instead, it will try to find keys in <code>KeyChain</code> by tag.
		</li>
		<li>
			<code>decisionOnFailoverStatus:</code> default method of the <code>DefaultFailoverStrategy</code> class that will be overridden to log server responses.
		</li>
    </ul>
</p>

<h1>Launching</h1>

<p>
	Before launching the application, make sure you have the latest version of xCode and CocoaPods installed.
</p>

To launch this sample application on the Kaa Objective-C SDK:

<ol>
	<li>
		Prepare your Objective-C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Objective-C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		
<pre>
sh build.sh
</pre>
		
		The build script will extract the Kaa SDK, install dependencies with CocoaPods and build the SDK.
        <blockquote>NOTE: The build script will also install CocoaPods master repository, which may take a few minutes.</blockquote>
	</li>
	<li>
		Open the CredentialsDemo.xcodeproj file and click the <b>Play</b> button.
		You should see the following message.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-306-credentials-objc/credentialsdemo/resources/pic/credentials-demo-0.png" />
		<br />
		<br />
		
		If you click <b>YES</b>, Kaa client will generate the public and private keys and store them in the <code>KeyChain</code>.
		The console will display the public key hash (endpoint ID) and public key body that you can use to provision on the server.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-306-credentials-objc/credentialsdemo/resources/pic/credentials-demo-1.png" />
		<br />
		<br />
		
		If you click <b>NO</b> and the <code>KeyChain</code> does not contain the corresponding keys, the application will catch <b>NSException</b> and stop running.
	</li>
</ol>

<h1>Troubleshooting</h1>

<h2>Running the build script returns an error message</h2>

<pre>
[!] Invalid `Podfile` file: [!] Unsupported options `{:exclusive=>true}` for target `KaaTests`.
</pre>

<p>
	This error can occur when using newer than version 1.0 of Cocoapods.
</p>

Try the following:

<ol>
	<li>
		Run the following command from the ./libs/kaa-ep-sdk/ folder.
		
<pre>
vim Podfile
</pre>
		
	</li>
	<li>
		Delete <b>:exclusive=>true</b>.
	</li>
	<li>
		Run this command.
		
<pre>
pod install
</pre>
		
	</li>
</ol>

Now you can open the CredentialsDemo.xcodeproj file and run the build script.

<h2>Nothing happens after the "Build succeeded" message</h2>

Make sure that the build target is set to <b>CredentialsDemo</b>, not <b>Kaa</b>.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>CREDENTIALS</features>
        <complexity>BASIC</complexity>
        <bundleId>credentials_demos</bundleId>
        <sourceArchive>objc/credentials_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCCredentialsDemo</projectFolder>
        <sdkLibDir>ObjCCredentialsDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>


    <bundle id="credentials_demos">
        <name>Credentials demos</name>
        <description>Kaa Credentials management subsystem demo applications bundle</description>
        <details>
            <![CDATA[
<p>
	This application bundle uses the <b>Credentials management</b> extension for full-cycle management of credentials in the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-platform" target="_blank">Kaa platform</a>.
	Consider a device that is preprogrammed by the manufacturer to use cloud services and comes with all the required credentials included.
	The device does not need any additional registration and is usable right out of the box.
	Should the device be lost or stolen, the user can revoke the credentials to prevent inappropriate use of the device.
</p>

For more information, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Devices-provisioning-and-registration/" target="_blank">Endpoint provisioning and registration</a>.

<h1>Playing around</h1>

<p>
	In this sample application, your <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> uses the internal <b>Credentials service</b> that accepts only previously registered (provisioned) credentials - the public key of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a>.
	<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> manages the endpoint credentials (generates, provisions and revokes them) and checks the credentials status (AVAILABLE, IN_USE, or REVOKED).
	The client-side application creates the <b>endpoint ID</b> (represented by the EP key hash) to register one Kaa endpoint; displays the endpoint status (registered/unregistered).
</p>
<p>
	To play around with the sample application, download the binaries/sources for the target platform and start the application.
	To do this, choose the target platform below and follow the instructions on the dedicated page.
</p>

<h2>Create new credentials</h2>

<p>
	Open the client-side application folder and start the application.
	You may receive the following console messages.

<pre>
2016-06-21 13:33:34,471 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Kaa client started
2016-06-21 13:33:34,488 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Cannot connect to server - no credentials found. Stopping application.
2016-06-21 13:33:34,488 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Stopping application
</pre>

	This means that the application cannot connect to the Kaa server because there are no credentials provided.
</p>

To generate the credentials:

<ol>
	<li>
		Start the server-side application.
		The console will display the following messages.
	
<pre>
2016-06-21 14:28:03,219 [main] INFO  o.k.k.demo.activation.ActivationDemo - Activation demo started
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo - Choose your option:
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo - 
1. Generate endpoint credentials.
2. Provision endpoint credentials using key files.
3. Provision endpoint credentials using public key string.
4. Revoke endpoint credentials.
5. Get credentials status.
6. Exit.
</pre>
	
	</li>
	<li>
		Choose the first menu item by typing <b>1</b> and pressing Enter.
		This generates new credentials: key.private and key.public files.
	</li>
	<li>
		Exit from the application by typing <b>6</b> and pressing Enter.
	</li>
	<li>
		Copy the generated files to the client-side application folder.
	</li>
	<li>
		Start the client-side application.
		
<pre>
2016-06-21 13:33:34,471 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Kaa client started
2016-06-21 13:33:34,488 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Endpoint ID: g2o7GSuQS8xPfX0NW9M4aXb2xx4=
2016-06-21 13:33:35,943 [pool-6-thread-1] ERROR o.k.k.c.c.i.c.DefaultOperationTcpChannel - Connection for channel [default_operation_tcp_channel] was rejected: REFUSE_VERIFICATION_FAILED
2016-06-21 13:33:38,964 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - Loss of connectivity detected
2016-06-21 13:33:38,969 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - VERIFICATION FAILED. Credentials is not provisioned!
2016-06-21 13:33:38,976 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - No operation is performed according to fail-over strategy decision
</pre>
		
		The messages above inform the user that the server rejected the credentials generated in the previous step.
		To enable connection, you need to provision the generated credentials to the server.
	</li>
</ol>

<h2>Provision your credentials</h2>

To provision your new credentials:

<ol>
	<li>
		Copy the <i>endpoint ID</i> to the Clipboard and start the server-side application.
		
<pre>
2016-06-21 14:28:03,219 [main] INFO  o.k.k.demo.activation.ActivationDemo - Activation demo started
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo - Choose your option:
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo -
1. Generate endpoint credentials.
2. Provision endpoint credentials using key files.
3. Provision endpoint credentials using public key string.
4. Revoke endpoint credentials.
5. Get credentials status.
6. Exit.
</pre>
	</li>
	<li>
		Type <b>2</b> and press Enter. Admin application will try to provision credentials using key files generated with item <b>1</b>. You'll see the result in the console:
		
<pre>
2016-10-03 13:08:54,471 [main] INFO  o.k.k.e.c.CredentialsAdminDemo - Going to "Provision endpoint credentials using key files".
2016-10-03 13:08:54,471 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Going to provision credentials...
2016-10-03 13:08:55,220 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Credentials with ID = g2o7GSuQS8xPfX0NW9M4aXb2xx4= are now in status: AVAILABLE
2016-10-03 13:08:55,221 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Credentials is successfully provisioned!
</pre>
			
	</li>
	<li>
		Some platforms require using a public key string to secure the process of credentials provisioning.
		And item <b>3</b> was added for this.
		Type <b>3</b>  and press Enter. The console will request the public key string. Copy paste it from your Kaa client to the command line and press Enter.
		
<pre>
2016-10-03 13:46:35,623 [main] INFO  o.k.k.e.c.CredentialsAdminDemo - Provisioning endpoint credentials using public key string.
2016-10-03 13:46:35,623 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Enter public key string of endpoint to provision its credentials:
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzLDPwbr/K5cRer51vmIPe7q1InPbAq9OgaBSgKDkrUDgmOPeekAkDLSVroeN9wZJU1HhgZk6RgaVhtjl4iTNgHhnsd
NqrA3qZYVMwL2W0YXFHanOSaRSpm+YX4UaCD8VNEr4alBvM4rYmRed1NIdyy2h+tDscrzRROKY66qVMY1rUjPDzY78ErK9EJxZV+Eo0Mq6ekXmx45ORYm4k/hn3eF/RyZK/yjt
fNqwqa6btx4Xk7udcm5gwcj3DJHEeL5DL52KNyOgqN9a9gYh5d/moPzfuMhDznFRQlWb1kVQ8pWNajRgJ3LD+3L8HCg1XNWJs6EOgSGTflKbfxJ3UHC/hQIDAQAB
2016-10-03 14:05:53,953 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Provisioning credentials with public key...
2016-10-03 14:05:54,412 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Credentials with ID = g2o7GSuQS8xPfX0NW9M4aXb2xx4= are now in status: AVAILABLE
2016-10-03 14:05:54,414 [main] INFO  o.k.k.e.c.kaa.KaaAdminManager - Credentials are successfully provisioned!
</pre>
		
		The credentials are now provisioned to the Kaa server.
	</li>
	<li>
		Start the client-side application.
		
<pre>
2016-06-21 15:23:33,298 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Kaa client started
2016-06-21 13:33:34,488 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Endpoint ID: g2o7GSuQS8xPfX0NW9M4aXb2xx4=
2016-06-21 15:23:33,309 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Device state: REGISTERED
</pre>
		
		Your endpoint is now successfully registered and connected to the server.
		You can find your current endpoint and the endpoint ID in the  <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a>.
		Type any character and press Enter to shut down the application.
	</li>
</ol>

<h2>Check credentials status</h2>

<p>
	To check the status of your credentials, start the server-side application and choose option 5 in the console.
	Enter the <i>endpoint ID</i> and press Enter.

<pre>
2016-06-21 14:28:03,219 [main] INFO  o.k.k.demo.activation.ActivationDemo - Activation demo started
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo - Choose your option:
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo -
1. Generate endpoint credentials.
2. Provision endpoint credentials using key files.
3. Provision endpoint credentials using public key string.
4. Revoke endpoint credentials.
5. Get credentials status.
6. Exit.

5
2016-06-21 17:22:08,588 [main] INFO  o.k.k.demo.activation.ActivationDemo - Enter credentials ID:
g2o7GSuQS8xPfX0NW9M4aXb2xx4=
</pre>
	
	The application checks the credentials provisioned for the selected endpoint ID.
	The console then returns the credentials status.
	
<pre>
2016-06-21 14:28:38,489 [main] INFO  o.k.k.demo.activation.ActivationDemo - Checking credentials status
2016-06-21 14:28:39,481 [main] INFO  o.k.k.d.a.utils.AdminClientManager - Credentials with ID=g2o7GSuQS8xPfX0NW9M4aXb2xx4= are now in status: IN_USE
</pre>
	
	The console message above informs the user that the status of the credentials is IN_USE.
	The server will reject any other endpoint that tries to connect using the same credentials.
</p>

<h2>Revoke credentials</h2>

To revoke the credentials:

<ol>
	<li>
		Start the client-side application.
		
<pre>
2016-06-21 15:23:33,298 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Kaa client started
2016-06-21 13:33:34,488 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Endpoint ID: g2o7GSuQS8xPfX0NW9M4aXb2xx4=
2016-06-21 15:23:33,309 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Device state: REGISTERED
</pre>
	</li>
	<li>
		Leave the client-side application open and start the server-side application.
		
<pre>
2016-06-21 14:28:03,219 [main] INFO  o.k.k.demo.activation.ActivationDemo - Activation demo started
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo - Choose your option:
2016-06-21 14:28:03,654 [main] INFO  o.k.k.demo.activation.ActivationDemo -
1. Generate endpoint credentials.
2. Provision endpoint credentials using key files.
3. Provision endpoint credentials using public key string.
4. Revoke endpoint credentials.
5. Get credentials status.
6. Exit.
</pre>
	</li>
	<li>
		Choose the option <b>4</b> and enter the <i>endpoint ID</i> in the command prompt.
		
<pre>
2016-06-21 17:22:08,588 [main] INFO  o.k.k.demo.activation.ActivationDemo - Enter ID of credentials you want to revoke:
g2o7GSuQS8xPfX0NW9M4aXb2xx4=

2016-06-21 14:28:38,489 [main] INFO  o.k.k.demo.activation.ActivationDemo - Revoking credentials
2016-06-21 14:28:39,481 [main] INFO  o.k.k.d.a.utils.AdminClientManager - Credentials with ID=g2o7GSuQS8xPfX0NW9M4aXb2xx4= are now in status: REVOKED
</pre>
		
		The credentials are now revoked.
	</li>
</ol>

<p>
	Now look at the client-side application command prompt.
	
<pre>
2016-06-21 15:51:15,778 [pool-6-thread-1] ERROR o.k.k.c.c.i.c.DefaultOperationTcpChannel - Connection for channel [default_operation_tcp_channel] was rejected: REFUSE_SERVER_UNAVAILABLE
2016-06-21 15:51:18,786 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - Loss of connectivity detected
2016-06-21 15:51:18,787 [pool-6-thread-1] INFO  o.k.k.e.credentials.CredentialsDemo - Failover happen. Status: NO_CONNECTIVITY
2016-06-21 15:51:18,789 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - Attempt to reconnect will be made in 5000 ms according to failover strategy decision
2016-06-21 15:51:23,840 [pool-6-thread-1] ERROR o.k.k.c.c.i.c.DefaultOperationTcpChannel - Connection for channel [default_operation_tcp_channel] was rejected: REFUSE_VERIFICATION_FAILED
</pre>
	
	Your Kaa client lost the server connection and stopped working.
</p>
<p>
	If you try to launch the application again, the server will reject the connection request.
	
<pre>
2016-06-21 18:25:15,721 [main] INFO  o.k.k.demo.activation.ActivationDemo - Activation demo started
2016-06-21 18:25:16,584 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Kaa client started
2016-06-21 18:25:16,588 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Endpoint ID: g2o7GSuQS8xPfX0NW9M4aXb2xx4=
2016-06-21 18:25:16,594 [pool-2-thread-1] INFO  o.k.k.demo.activation.ActivationDemo - Device state: active
2016-06-21 18:25:16,746 [pool-6-thread-1] ERROR o.k.k.c.c.i.c.DefaultOperationTcpChannel - Connection for channel [default_operation_tcp_channel] was rejected: REFUSE_VERIFICATION_FAILED
2016-06-21 18:25:19,758 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - Loss of connectivity detected
2016-06-21 18:25:19,761 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - VERIFICATION FAILED. Credentials is not provisioned!
2016-06-21 18:25:19,767 [pool-6-thread-1] WARN  o.k.k.c.c.i.c.DefaultOperationTcpChannel - No operation is performed according to fail-over strategy decision
</pre>
</p>

<h1>What's next?</h1>

For more information, see:

<ul>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Devices-provisioning-and-registration/" target="_blank">Endpoint provisioning and registration</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-profiles/" target="_blank">Endpoint profiles</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-groups/" target="_blank">Endpoint groups</a>.
	</li>
	<li>
		<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Configuration-management/" target="_blank">Configuration management</a>.
	</li>
</ul>
            ]]>
        </details>
    </bundle>
</projectsConfig>
