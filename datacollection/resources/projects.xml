<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="datacollection_demo_java">
        <name>Data collection Java demo</name>
        <description>Kaa Logging subsystem demo app based on Java SDK</description>
        <details>
        	<![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/" target="_blank">data collection</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa Java SDK</a>.
	The log uploading process is defined by the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-upload-strategies" target="_blank">log upload strategy</a>.
	In this sample application, the upload is initiated when the number of logs in the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-storage" target="_blank">log storage</a> reaches 5.
</p>

To implement this feature for Java SDK, the following API methods are used in this sample application:

<ul>
	<li>
		<code>addLogRecord()</code> method submits new logs for further sending.
	</li>
	<li>
		<code>addConfigurationListener()</code> method adds a configuration listener that enables managing the configuration parameters from the Administration UI.
		As an example of such parameter, the sampling period value is used in this sample application.
	</li>
</ul>

<h1>Launching</h1>

<p>
	To launch this sample application on the Kaa Java SDK, you need to prepare your Java SDK environment.
	To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Using Kaa endpoint SDKs</a>.
</p>

<p>
	For sample applications that utilize Kaa Java SDK, both the binary files (.jar archive) and the source code (.tar.gz archive) are available for download.
	If you want to only launch the sample application, download the binary files.
	If you want to explore the source code of the sample application, download the source code archive.
</p>

<h2>Install using the binary files</h2>

To install the sample application using the binary files:
	
<ol>
	<li>
		Click the <b>Binary</b> button.
		A binary build window will open.
		Click <b>Ok</b> and download the .jar file.
	</li>
	<li>
		Run the following command from the directory containing the downloaded .jar archive.
		
		<pre>
			$ java -jar DataCollectionDemo.jar
		</pre>
		
		The sample application console will display the startup message.
	</li>
</ol>

<h2>Install using the source code</h2>

To install the sample application using the source code:

<ol>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		To build from new sources, you need to have the <a href="http://ant.apache.org/" target="_blank">Apache Ant</a> installed on your host machine.
		To install Apache Ant, run the following command from the directory containing the unpacked sources.
		
		<pre>
			$ ant debug
		</pre>
		
		To launch the sample application from the previously built sources run the following command from the directory containing the sources.
		
		<pre>
			$ java -jar build/jar/DataCollectionDemo.jar
		</pre>
	</li>
</ol>

If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.

<h2>Manage log records</h2>

<p>
	When you start the application, the last five log records will be sent from the endpoint to the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-cluster" target="_blank">Kaa cluster</a>.
	The Kaa cluster will persist those records in the MongoDB database of the Sandbox using the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/MongoDB-log-appender/" target="_blank">MongoDB log appender</a>.
</p>

<p>
	You can access the collected data by querying an instance of the MongoDB database in the Sandbox.
	To do this, run the following commands in the Kaa Sandbox console.
	
	<pre>
		$ mongo kaa
		db.logs_$your_application_token$.find()
	</pre>
</p>
            ]]>
        </details>
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
         
        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>java/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>JDataCollectionDemo</projectFolder>
        <sdkLibDir>JDataCollectionDemo/lib</sdkLibDir>
        <destBinaryFile>JDataCollectionDemo/build/jar/DataCollectionDemo.jar</destBinaryFile>
    </project>

    <project id="datacollection_demo_c">
        <name>Data collection C demo</name>
        <description>Kaa Logging subsystem demo app based on C SDK</description>
        <details>
        	<![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/" target="_blank">data collection</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa C SDK</a>.
	The log uploading process is defined by the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-upload-strategies" target="_blank">log upload strategy</a>.
	In this sample application, the upload is initiated when the number of logs in the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-storage" target="_blank">log storage</a> reaches 5.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C SDK:

<ol>
	<li>
		Prepare your C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
    <li>
        Unpack the downloaded archive.
    </li>
    <li>
        Unpack the SDK archive.
        <pre>
            tar -zxf libs/kaa/kaa* -C libs/kaa
        </pre>
    </li>
    <li>
        Execute the following script:
        (Note this should be copy-pasted to the terminal all at once)
        <pre>
            mkdir -p build \
            && cd build \
            && cmake .. \
            && make
        </pre>
        By default the project is generated for Posix target.
        To generate and build project for other supported targets,
        refer to the <a href="http://kaaproject.github.io/kaa/docs/latest/Programming-guide/Using-Kaa-endpoint-SDKs/" target="_blank">documentation pages</a>.
    </li>
    <li>
        To run demo, execute:
        ./build/demo_client
    </li>
</ol>

<h1>Troubleshooting</h1>

<h2>How do I check if the server received the log records?</h2>

When <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> receives log records, it sends them to the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-appenders" target="_blank">log appender</a>.
This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/MongoDB-log-appender/" target="_blank">MongoDB log appender</a>.

<p>
	To check if the server received the log records, use the following commands.
	
	<pre>
		$ mongo kaa
		> db.logs_$YOUR_APPLICATION_TOKEN.find()
	</pre>
</p>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">C SDK installation instructions</a>.
</p>
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
            
        <platforms>LINUX_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>c/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>CDataCollectionDemo</projectFolder>
        <sdkLibDir>CDataCollectionDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>

    <project id="datacollection_demo_cpp">
        <name>Data collection C++ demo</name>
        <description>Kaa Logging subsystem demo app based on C++ SDK</description>
        <details>
        	<![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/" target="_blank">data collection</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa C++ SDK</a>.
	The log uploading process is defined by the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-upload-strategies" target="_blank">log upload strategy</a>.
	In this sample application, the upload is initiated when the number of logs in the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-storage" target="_blank">log storage</a> reaches 5.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C++ SDK:

<ol>
	<li>
		Prepare your C++ SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
    <li>
        Unpack the downloaded archive.
    </li>
    <li>
        Unpack the SDK archive.
        <pre>
            tar -zxf libs/kaa/kaa* -C libs/kaa
        </pre>
    </li>
    <li>
        Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
        <p>
            <b>Windows</b>
            <pre>
                mkdir build
                cd build
                cmake -G "Nmake Makefiles" ..
                nmake
            </pre>
        </p>
        <p>
            <b>Linux, OS X (macOS)</b>
            (Note this should be copy-pasted to the terminal all at once)
            <pre>
                mkdir build \
                && cd build \
                && cmake .. \
                && make
            </pre>
        </p>
    </li>
</ol>

Once you built the application, you can start it at any time using the following command.

<p>
	<b>Windows</b>
	<pre>
		demo_client.exe
	</pre>
</p>
<p>
	<b>Linux, OS X (macOS)</b>
	<pre>
		./demo_client
	</pre>
</p>

<h1>Troubleshooting</h1>

<h2>How do I check if the server received the log records?</h2>

When <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a> receives log records, it sends them to the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-appenders" target="_blank">log appender</a>.
This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/MongoDB-log-appender/" target="_blank">MongoDB log appender</a>.

<p>
	To check if the server received the log records, use the following commands.
	
	<pre>
		$ mongo kaa
		> db.logs_$YOUR_APPLICATION_TOKEN.find()
	</pre>
</p>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">C++ SDK installation instructions</a>.
</p>
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
            
        <platforms>LINUX_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>cpp/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>CppDataCollectionDemo</projectFolder>
        <sdkLibDir>CppDataCollectionDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>

    <project id="datacollection_demo_objc">
        <name>Data collection Objective-C demo</name>
        <description>Kaa Logging subsystem demo app based on Objective-C SDK</description>
        <details>
        	<![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/" target="_blank">data collection</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-sdk-type" target="_blank">Kaa Objective-C SDK</a>.
	This feature enables <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-client" target="_blank">Kaa client</a> to store collect log records, store them in the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoint</a>, persist them on the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>, and send them to the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#operations-service" target="_blank">Operations service</a>.
</p>

<p>
	The log uploading process is defined by the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-upload-strategies" target="_blank">log upload strategy</a> set by the <code>setLogUploadStrategy:</code> method.
	The <code>BucketRunner</code> feature is used to track the batch uploads.
</p>

<h1>Launching</h1>

<p>
	Before launching the application, make sure you have the latest version of xCode and CocoaPods installed.
</p>

To launch this sample application on the Kaa Objective-C SDK:

<ol>
	<li>
		Prepare your Objective-C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/Objective-C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		
		<pre>
			sh build.sh
		</pre>
		
		The build script will extract the Kaa SDK, install dependencies with CocoaPods and build the SDK.
        <blockquote>NOTE: The build script will also install CocoaPods master repository, which may take a few minutes.</blockquote>
	</li>
	<li>
		Open the DataCollectionDemo.xcodeproj file and click the <b>Play</b> button.
		You should see the following console messages.
		
		<pre>
			2016-08-30 11:45:01.754 DataCollectionDemo[77224:13403075] DataCollectionDemo started
			2016-08-30 11:45:02.080 DataCollectionDemo[77224:13403521] Kaa client started
			2016-08-30 11:45:03.081 DataCollectionDemo[77224:13403075] Log sent with temperature: 28, timestamp: 149909177
			2016-08-30 11:45:03.104 DataCollectionDemo[77224:13403449] Received log record delivery info. Bucket id [0], delivery time [23 ms]
			2016-08-30 11:45:04.081 DataCollectionDemo[77224:13403075] Log sent with temperature: 29, timestamp: 149910177
			2016-08-30 11:45:04.107 DataCollectionDemo[77224:13403448] Received log record delivery info. Bucket id [1], delivery time [26 ms]
			2016-08-30 11:45:05.081 DataCollectionDemo[77224:13403075] Log sent with temperature: 30, timestamp: 149911177
			2016-08-30 11:45:05.095 DataCollectionDemo[77224:13403521] Received log record delivery info. Bucket id [2], delivery time [14 ms]
			2016-08-30 11:45:06.080 DataCollectionDemo[77224:13403075] Log sent with temperature: 27, timestamp: 149912176
			2016-08-30 11:45:06.102 DataCollectionDemo[77224:13403521] Received log record delivery info. Bucket id [3], delivery time [22 ms]
			2016-08-30 11:45:07.081 DataCollectionDemo[77224:13403075] Log sent with temperature: 30, timestamp: 149913177
			2016-08-30 11:45:07.094 DataCollectionDemo[77224:13403449] Received log record delivery info. Bucket id [4], delivery time [13 ms]
		</pre>
		
	</li>
</ol>

<h1>Troubleshooting</h1>

<h2>Running the build script returns an error message</h2>

<pre>
	[!] Invalid `Podfile` file: [!] Unsupported options `{:exclusive=>true}` for target `KaaTests`.
</pre>

<p>
	This error can occur when using newer than version 1.0 of Cocoapods.
</p>

Try the following:

<ol>
	<li>
		Run the following command from the ./libs/kaa-ep-sdk/ folder.
		
		<pre>
			vim Podfile
		</pre>
		
	</li>
	<li>
		Delete <b>:exclusive=>true</b>.
	</li>
	<li>
		Run this command.
		
		<pre>
			pod install
		</pre>
		
	</li>
</ol>

Now you can open the DataCollectionDemo.xcodeproj file and run the build script.

<h2>Nothing happens after the "Build succeeded" message</h2>

Make sure that the build target is set to <b>DataCollectionDemo</b>, not <b>Kaa</b>.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>objc/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCDataCollectionDemo</projectFolder>
        <sdkLibDir>ObjCDataCollectionDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>

    <bundle id="datacollection_demos">
        <name>Data collection demos</name>
        <description>Kaa Logging subsystem demo applications bundle</description>
        <details>
            <![CDATA[
<p>
	This application bundle demonstrates the features of Kaa <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection" target="_blank">Data collection extension</a>.
	This extension allows you to collect log records from the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoints</a>.
	The log records are sent from the endpoints to <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#operations-service" target="_blank">Operations services</a> where they are either persisted on the server for further processing, or submitted for the immediate stream analysis.
</p>
<p>
	For better illustration, the Data collection extension will be demonstrated in conjunction with the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Configuration-management/" target="_blank">Configuration extension</a>.
</p>
<p>
	This demonstration explains how you can record the readings of a temperature sensor to a database and configure the sampling period of the sensor.
</p>
<p>
	See also <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
</p>

<h1>Playing around</h1>

<h2>Log schema</h2>

The structure of Kaa logs is defined by the chosen CT schema.
This demo <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-application" target="_blank">application</a> will record the readings of the temperature sensors and save them to the MongoDB database.

<p>
	The following schema is used to define the format of the log records.
	
	<pre>
		{
		  "type" : "record",
		  "name" : "DataCollection",
		  "namespace" : "org.kaaproject.kaa.schema.sample",
		  "fields" : [
		    {
			"name" : "temperature",
			"type" : "int"
		    },
		    {
			"name" : "timeStamp",
			"type" : "long"
		    }
		  ],
		  "displayName" : "org.kaaproject.kaa.schema.sample.DataCollection"
		}
	</pre>
	
</p>

<p>
	You can view and edit this schema using the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a>.
</p>

To do this:

<ol>
	<li>
		Click the <b>Administration UI</b> button, enter username <b>devuser</b> and password <b>devuser123</b>.
	</li>
	<li>
		Click the <b>Applications</b> arrow to unfold the list.
		Click <b>Data collection demo</b> > <b>Schemas</b> > <b>Log</b>.
		You will see the list of all log schemas stored for your application.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_6.png" />
		<br />
		<br />
		
	</li>
	<li>
		Select the <b>DataCollection</b> schema by clicking on the corresponding row.
		The <b>Log schema details</b> page will open.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_7.png" />
		<br />
		<br />
		
		The <b>DataCollection</b> schema is included in the Sandbox for demonstration purpose.
		You can create your own log schemas.
		To do this, use the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Server-REST-APIs/#!/Logging/saveLogSchema" target="_blank">server REST API</a> or follow <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-profiles/#setting-client-side-ep-profile-schema" target="_blank">these instructions</a>for Administration UI.
	</li>
</ol>

<p>
	To configure the sampling period of the sensor, you need to change the default configuration of the endpoint initially received from the group <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#group-all" target="_blank">All</a>.
	In this demo application, the following configuration schema is used to configure the sampling period of the sensor.
	
	<pre>
		{
		  "type" : "record",
		  "name" : "Configuration",
		  "namespace" : "org.kaaproject.kaa.schema.sample",
		  "fields" : [ {
			"name" : "samplePeriod",
			"type" : "int",
			"by_default" : 1
		  } ],
		  "displayName" : "org.kaaproject.kaa.schema.sample.Configuration"
		}
	</pre>
	
	To view the list of configuration schemas, open the <b>Configuration</b> page under the <b>Schemas</b> section of the application.
	
	<br />
	<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_8.png" />
	<br />
	<br />	
	
	To edit a configuration schema, click the corresponding row to open the <b>Configuration schema details</b> page.
	
	<br />
	<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_9.png" />
	<br />
	<br />	
	
	This schema has only one property named <code>samplePeriod</code> that defines the sampling period value.
</p>

<h2>Log appenders</h2>

To send the log records from the Operations service to the MongoDB database, Kaa uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/MongoDB-log-appender/" target="_blank">MongoDB log appender</a>.

<p>
	To view the list of log appenders, open the <b>Log appenders</b> page of the application.
	
	<br />
	<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_10.png" />
	<br />
	<br />	
	
	To edit a log appender, click on the corresponding row to open the <b>Log appender details</b> page.
</p>

<p>
	This demo application uses the following log appender definition.
	
	<pre>
		{
		   "mongoServers":[
			  {
				 "host":"localhost",
				 "port":27017
			  }
		   ],
		   "mongoCredentials":[
		
		   ],
		   "dbName":"kaa",
		   "connectionsPerHost":{
			  "int":30
		   },
		   "maxWaitTime":{
			  "int":120000
		   },
		   "connectionTimeout":{
			  "int":5000
		   },
		   "socketTimeout":{
			  "int":0
		   },
		   "socketKeepalive":{
			  "boolean":false
		   },
		   "includeClientProfile":{
			  "boolean":false
		   },
		   "includeServerProfile":{
			  "boolean":false
		   }
		}
	</pre>
	
</p>

<p>
	To define the conditions under which the logs should be sent to the server, Kaa uses <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/#log-upload-strategies" target="_blank">log upload strategies</a>.
	This demo application uses the <b>Log count</b> strategy and uploads the logs upon reaching the set limit of log records number.
	The default threshold value for this strategy is set to <b>1</b> which means that Kaa will send every log record separately.
</p>

<p>
	If you start your demo application, the console will display report the sampling period value and the sensor readings.
	
	<pre>
		2016-08-22 13:54:40,897 [main] INFO  o.k.k.d.d.DataCollectionDemo - DataCollectionDemo app starting!
		2016-08-22 13:54:41,996 [main] INFO  o.k.k.d.d.DataCollectionDemo - --= Press any key to exit =--
		2016-08-22 13:54:41,997 [pool-3-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Kaa client started
		2016-08-22 13:54:42,015 [pool-3-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Default sample period: 1
		2016-08-22 13:54:57,519 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 38
		2016-08-22 13:55:02,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 34
		2016-08-22 13:55:07,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 37
		2016-08-22 13:55:12,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 40
		2016-08-22 13:55:17,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 35
		2016-08-22 13:55:22,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 32
		...
	</pre>
	
	You can access the collected data directly from the database using the MongoDB CLI tool.
	To do this, access Sandbox virtual machine over ssh with the username <b>kaa</b> and password <b>kaa</b>, or use the virtual machine to run a Mongo client application for the MongoDB database.
	
	<pre>
		 $ ssh kaa@%your_sandbox_instance_ip/host%

		 $ mongo kaa
		 > db.logs_%data_collection_application_token%.find()
	</pre>
	
	You will see the following output.
	
	<br />
	<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_0.png" />
	<br />
	<br />	
	
	Now you need to replace <i>%your_sandbox_instance_ip/host%</i> with the actual host/ip address of your Sandbox.
	To do this, go to the Sandbox Management page and specify the real IP of your machine in the <b>Kaahost/IP</b> block.
	Alternatively, you can use the following command: <code>$ ssh kaa@127.0.0.1 -p 2222</code>.
	Then, replace the <i>%data_collection_application_token%</i> with the actual <b>Data collection</b> <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#application-token" target="_blank">application token</a>.
	To view the application token, open the <b>Application details</b> page.
	
	<br />
	<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_1.png" />
	<br />
	<br />
	
</p>

<h2>Change sampling period</h2>

Every endpoint, once registered, becomes a member of the default group <b>All</b> and receives its default configuration from that group.
To change the configuration of the endpoint, you need to either make the endpoint a member of a different group, or change the default configuration values of the group <b>All</b>.
See also <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-groups/" target="_blank">Endpoint groups</a>.

<p>
	To change a value in the default configuration:
	
	<ol>
		<li>
			Open the <b>Endpoint groups</b> page of the application and select the group <b>All</b> by clicking on the corresponding row.
			The <b>Endpoint group details</b> page will open.
			
			<br />
			<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_2.png" />
			<br />
			<br />
			
		</li>
		<li>
			In the <b>Configurations</b> section, select the current configuration (the one that has the latest version).
			
			<br />
			<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_3.png" />
			<br />
			<br />
			
		</li>
		<li>
			On the <b>Configuration details</b> page, select the <b>Draft</b> tab and specify the new <b>samplingPeriod</b> value in the <b>Configuration body</b> block.
			For example, set it to <b>5</b>
			
			<br />
			<img src="https://raw.github.com/hunch7/sample-apps/app-228-DataColl-bundle/datacollectiondemo/resources/pic/collection_demo_5.png" />
			<br />
			<br />
			
			Click <b>Save</b> to save the new value, then click <b>Activate</b> to apply the new configuration to this group.
		</li>
	</ol>
</p>

<p>
	If you now start the application, the console will display the following messages.
	
	<pre>
		...
		2016-08-22 13:54:42,934 [pool-5-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Received configuration data. New sample period: 5
		2016-08-22 13:54:57,519 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 38
		2016-08-22 13:55:02,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 34
		2016-08-22 13:55:07,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 37
		2016-08-22 13:55:12,517 [pool-1-thread-1] INFO  o.k.k.d.d.DataCollectionDemo - Sampled Temperature: 40
	</pre>
	
	This means that the sampling period has been changed in the default configuration, and now the application sends the log records every 5 seconds.
</p>
            ]]>
        </details>
    </bundle>
</projectsConfig>
