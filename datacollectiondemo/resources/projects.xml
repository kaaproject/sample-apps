<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="datacollection_demo_java">
        <name>Data collection Java demo</name>
        <description>Kaa Logging subsystem demo app based on Java SDK</description>
        <details><![CDATA[
This simple app demonstrates capabilities of the Kaa Logging subsystem on the Java SDK.

<h2>Installation</h2>
Download the jar file to your device by clicking the "Binary" button on the left. Make sure that you have Java installed on your device. Run the application using the following command in the console:
<pre>
$ java -jar DataCollectionDemo.jar
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. By starting the "Data collection Java demo" app, you will trigger delivery of five log messages from the endpoint to the Kaa cluster. The Kaa cluster will persist those messages in a sandbox MongoDB database using a MongoDB appender. You can explore the collected data by querying the sandbox MongoDB instance as follows:
<pre>
$ mongo kaa
db.logs_$your_application_token$.find()
</pre>

Where $your_application_token$ is the application token you can copy from the main window of the application in the Administration UI.<br/><br/>

You can also create custom log appenders. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Data collection demo" application, then select "Log appenders". From here you can manage log appenders.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>
For more background on the Kaa Logging subsystem, please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
         
        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>java/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>JDataCollectionDemo</projectFolder>
        <sdkLibDir>JDataCollectionDemo/lib</sdkLibDir>
        <destBinaryFile>JDataCollectionDemo/build/jar/DataCollectionDemo.jar</destBinaryFile>
    </project>
    <project id="datacollection_demo_c">
        <name>Data collection C demo</name>
        <description>Kaa Logging subsystem demo app based on C SDK</description>
        <details><![CDATA[
This simple app demonstrates capabilities of the Kaa Logging subsystem on the C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. By starting the "Data collection C demo" app, you will trigger delivery of five log messages from the endpoint to the Kaa cluster. The Kaa cluster will persist those messages in a sandbox MongoDB database using a MongoDB appender. You can explore the collected data by querying the sandbox MongoDB instance as follows:
<pre>
$ mongo kaa
db.logs_$your_application_token$.find()
</pre>

Where $your_application_token$ is the application token you can copy from the main window of the application in the Administration UI.<br/><br/>

Additionally, you can create custom log appenders. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Data collection demo" application, then select "Log appenders". From here you can manage log appenders.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Logging subsystem, please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
            
        <platforms>LINUX_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>c/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>CDataCollectionDemo</projectFolder>
        <sdkLibDir>CDataCollectionDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="datacollection_demo_cpp">
        <name>Data collection C++ demo</name>
        <description>Kaa Logging subsystem demo app based on C++ SDK</description>
        <details><![CDATA[
This simple app demonstrates capabilities of the Kaa Logging subsystem on the C++ SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. By starting the "Data collection C++ demo" app, you will trigger delivery of five log messages from the endpoint to the Kaa cluster. The Kaa cluster will persist those messages in a sandbox MongoDB database using a MongoDB appender. You can explore the collected data by querying the sandbox MongoDB instance as follows:
<pre>
$ mongo kaa
db.logs_$your_application_token$.find()
</pre>

Where $your_application_token$ is the application token you can copy from the main window of the application in the Administration UI.<br/><br/>

Additionally, you can create custom log appenders. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Data collection demo" application, then select "Log appenders". From here you can manage log appenders.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Logging subsystem, please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
            
        <platforms>LINUX_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>cpp/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>CppDataCollectionDemo</projectFolder>
        <sdkLibDir>CppDataCollectionDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="datacollection_demo_objc">
        <name>Data collection Objective-C demo</name>
        <description>Kaa Logging subsystem demo app based on Objective-C SDK</description>
        <details><![CDATA[
This simple app demonstrates capabilities of the Kaa Logging subsystem on the Objective-C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. By starting the "Data collection Objective-C demo" app, you will trigger delivery of five log messages from the endpoint to the Kaa cluster. The Kaa cluster will persist those messages in a sandbox MongoDB database using a MongoDB appender. You can explore the collected data by querying the sandbox MongoDB instance as follows:
<pre>
$ mongo kaa
db.logs_$your_application_token$.find()
</pre>

Where $your_application_token$ is the application token you can copy from the main window of the application in the Administration UI.<br/><br/>

Additionally, you can create custom log appenders. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Data collection demo" application, then select "Log appenders". From here you can manage log appenders.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Logging subsystem, please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>BASIC</complexity>
        <bundleId>datacollection_demos</bundleId>
        <sourceArchive>objc/datacollection_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCDataCollectionDemo</projectFolder>
        <sdkLibDir>ObjCDataCollectionDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="datacollection_demos">
        <name>Data collection demos</name>
        <description>Kaa Logging subsystem demo applications bundle</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrates capabilities of the Kaa Logging subsystem.

Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.

<h2>What's next?</h2>
For more background on the Kaa Logging subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Collecting+data+from+endpoints">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Logging">design reference</a> sections.
]]>
        </details>
    </bundle>
</projectsConfig>