<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="event_demo_java">
        <name>Event Java demo</name>
        <description>Kaa Event subsystem demo app based on Java SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">events</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa Java SDK</a>.
	You can use this application to define your own events and have your <a href="http://kaaproject.github.io/kaa/docs/Glossary/#endpoint-ep" target="_blank">endpoints</a> exchange them with one another.
</p>

To implement this feature for Java SDK, the following API methods are used in this sample application:

<ul>
	<li>
		<code>KaaClient.attachUser()</code> method attaches current endpoint to the specified user.
	</li>
	<li>
		<code>[family_name]EventFamily.addListener()</code> method sets a listener to catch events.
		Only endpoints attached to the same user can exchange events with one another.
	</li>
	<li>
		<code>[family_name]EventFamily.onEvent()</code> method receives events of particular type.
		Every <code>onEvent()</code> method catches events of its own type.
	</li>
	<li>
		<code>[family_name]EventFamily.sendEventToAll()</code> method broadcasts the event to all other endpoints.
	</li>
</ul>

<blockquote>NOTE: <code>family_name</code> means real event family name, for example <code>ChatEventFamily</code>.</blockquote>

For more information, see <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Using Kaa Java SDK</a>.

<h1>Launching</h1>

<p>
	To launch this sample application on the Kaa Java SDK, you need to prepare your Java SDK environment.
	To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Java/" target="_blank">Using Kaa endpoint SDKs</a>.
</p>

<p>
	For sample applications that utilize Kaa Java SDK, both the binary files (.jar archive) and the source code (.tar.gz archive) are available for download.
	If you want to only launch the sample application, download the binary files.
	If you want to explore the source code of the sample application, download the source code archive.
</p>

<h2>Install using the binary files</h2>

To install the sample application using the binary files:
	
<ol>
	<li>
		Click the <b>Binary</b> button.
		A binary build window will open.
		Click <b>Ok</b> and download the .jar file.
	</li>
	<li>
		Run the following command from the directory containing the downloaded .jar archive.
		
		<pre>
			$ java -jar EventDemo.jar
		</pre>
		
		The sample application console will display the startup message.
	</li>
</ol>

<h2>Install using the source code</h2>

To install the sample application using the source code:

<ol>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive.
	</li>
	<li>
		To build from new sources, you need to have the <a href="http://ant.apache.org/" target="_blank">Apache Ant</a> installed on your host machine.
		To install Apache Ant, run the following command from the directory containing the unpacked sources.
		
		<pre>
			$ ant debug
		</pre>
		
		To launch the sample application from the previously built sources run the following command from the directory containing the sources.
		
		<pre>
			$ java -jar build/jar/EventDemo.jar
		</pre>
	</li>
</ol>

If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>java/event_demo.tar.gz</sourceArchive>
        <projectFolder>JEventDemo</projectFolder>
        <sdkLibDir>JEventDemo/lib</sdkLibDir>
        <destBinaryFile>JEventDemo/build/jar/EventDemo.jar</destBinaryFile>
    </project>
    <project id="event_demo_c">
        <name>Event C demo</name>
        <description>Kaa Event subsystem demo app based on C SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">events</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa C SDK</a>.
	You can use this application to define your own events and have your <a href="http://kaaproject.github.io/kaa/docs/Glossary/#endpoint-ep" target="_blank">endpoints</a> exchange them with one another.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C SDK:

<ol>
	<li>
		Prepare your C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
			<pre>
				./build.sh deploy
			</pre>
	</li>
	<li>
		The program will ask you to enter the target platform for your build.
		Press Enter to specify the x86-64 platform (default) or enter the name of one of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Supported-platforms/" target="_blank">supported platforms</a> and press Enter.
		The C SDK and the demo application are now built and the demo application is launched.
	</li>
</ol>

Once you built the application, you can start it at any time using the following command.

<pre>
	./build.sh run
</pre>

When you start the application, Kaa client generates its endpoint access token, publishes it on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-cluster" target="_blank">Kaa cluster</a> and displays it in the console.

If the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#assisted-attachment" target="_blank">assisted attachment</a> was successful, Kaa client will display the message previously sent from the mobile application.

<h1>Troubleshooting</h1>

<h2>Running the build.sh script returns an error message</h2>

<pre>
	libs/kaa/kaa-c*.tar.gz: Cannot open: No such file or directory.
</pre>

<p>
	This means that no SDK tarball was found in the libs/kaa directory.
</p>

Try the following:

<ul>
	<li>
		Download and install the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-sandbox" target="_blank">Kaa Sandbox</a>.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		Download the SDK tarball for this sample application and put it in the libs/kaa folder.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Your-first-Kaa-application/#generating-sdk" target="_blank">Generating SDK</a>.
	</li>
</ul>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">C SDK installation instructions</a>.
</p>
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>c/event_demo.tar.gz</sourceArchive>
        <projectFolder>CEventDemo</projectFolder>
        <sdkLibDir>CEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_cpp">
        <name>Event C++ demo</name>
        <description>Kaa Event subsystem demo app based on C++ SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">events</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa C++ SDK</a>.
	You can use this application to define your own events and have your <a href="http://kaaproject.github.io/kaa/docs/Glossary/#endpoint-ep" target="_blank">endpoints</a> exchange them with one another.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C++ SDK:

<ol>
	<li>
		Prepare your C++ SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		
		<p>
			<b>Windows</b>
			<pre>
				mkdir build
				cd build
				cmake -G "Nmake Makefiles" ..
				nmake
			</pre>
		</p>
		<p>
			<b>Linux, OS X (macOS)</b>
			<pre>
				mkdir build
				cd build
				cmake ..
				make
			</pre>
		</p>
	</li>
	<li>
		The program will ask you to enter the target platform for your build.
		Press Enter to specify POSIX (default) or enter the name of one of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Supported-platforms/" target="_blank">supported platforms</a> and press Enter.
		The C++ SDK and the demo application are now built and the demo application is launched.
	</li>
</ol>

Once you built the application, you can start it at any time using the following command.

<p>
	<b>Windows</b>
	<pre>
		demo_client
	</pre>
</p>
<p>
	<b>Linux, OS X (macOS)</b>
	<pre>
		./demo_client
	</pre>
</p>
<p>
	To launch a separate instance of the application, run it from another working directory.
	
	<pre>
		cd ..
		./build/demo_client
	</pre>
</p>

<h1>Troubleshooting</h1>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The source directory /.../CppEventDemo/libs/kaa does not contain a CMakeLists.txt file.
</pre>

<p>
	This means that no SDK tarball was found in the libs/kaa directory.
</p>

Try the following:

<ul>
	<li>
		Download and install the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-sandbox" target="_blank">Kaa Sandbox</a>.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		Download the SDK tarball for this sample application and put it in the libs/kaa folder.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Your-first-Kaa-application/#generating-sdk" target="_blank">Generating SDK</a>.
	</li>
</ul>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">C++ SDK installation instructions</a>.
</p>
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>cpp/event_demo.tar.gz</sourceArchive>
        <projectFolder>CppEventDemo</projectFolder>
        <sdkLibDir>CppEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_objc">
        <name>Event Objective-C demo</name>
        <description>Kaa Event subsystem demo app based on Objective-C SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">events</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa Objective-C SDK</a>.
	You can use this application to define your own events and have your <a href="http://kaaproject.github.io/kaa/docs/Glossary/#endpoint-ep" target="_blank">endpoints</a> exchange them with one another.
</p>

<p>
	The application first initializes the <code>ChatClientManager</code> class in the AppDelegate.h file.
	<br />
	Then <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-server" target="_blank">Kaa client</a> starts and attaches a new user.
</p>

<p>
	The <code>ChatClientManager</code> class handles the Kaa events.
	<br />
	When <code>ChatClientManager</code> receives an event from <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-server" target="_blank">Kaa server</a>, it displays a notification about the changes.
</p>

<h1>Launching</h1>

<p>
	Before launching the application, make sure you have the latest version of xCode and CocoaPods installed.
</p>

To launch this sample application on the Kaa Objective-C SDK:

<ol>
	<li>
		Prepare your Objective-C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Objective-C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		
		<pre>
			sh build.sh compile
		</pre>
		
		The build script will extract the Kaa SDK, install dependencies with CocoaPods and build the SDK.
	</li>
	<li>
		Open the EventDemo.xcodeproj and click the <b>Play</b> button.
		You should see the following console messages.
		
		<pre>
			2016-09-09 11:38:51.964 EventDemo[2621:1000514] Kaa client started
			2016-09-09 11:38:52.722 EventDemo[2621:1000528] Endpoint successfully attached!
		</pre>
	
	</li>
</ol>

Now you can send messages, create and delete chat rooms.

<br />
<img src="https://raw.github.com/hunch7/sample-apps/app-290-events-objc/eventdemo/resources/pic/event-objc-1.png" /> <img src="https://raw.github.com/hunch7/sample-apps/app-290-events-objc/eventdemo/resources/pic/event-objc-2.png" />
<br />
<br />

<br />
<img src="https://raw.github.com/hunch7/sample-apps/app-290-events-objc/eventdemo/resources/pic/event-objc-3.png" /> <img src="https://raw.github.com/hunch7/sample-apps/app-290-events-objc/eventdemo/resources/pic/event-objc-4.png" />
<br />
<br />

<h1>Troubleshooting</h1>

<h2>Nothing happens after the "Build succeeded" message</h2>

Make sure that the build target is set to <b>EventDemo</b>, not <b>Kaa</b>.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>objc/event_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCEventDemo</projectFolder>
        <sdkLibDir>ObjCEventDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="event_demos">
        <name>Event demos</name>
        <description>Kaa Event subsystem demo applications bundle</description>
        <details>
            <![CDATA[
<p>
    This application bundle demonstrates the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events" target="_blank">Event extension</a> that enables <a href="http://kaaproject.github.io/kaa/docs/Glossary/#endpoint-ep" target="_blank">endpoints</a> to exchange messages with one another through <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-server" target="_blank">Kaa server</a>.
</p>

<h1>Playing around</h1>

<p>
    The event data structure is defined by the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#event-class-and-event-class-schema" target="_blank">Event Class (EC) schema</a>.
    Event classes are grouped into <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#event-class-families" target="_blank">Event Class Family (ECF)</a>.
    After you add an <b>ECF</b> in the application, you need to set up the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#event-family-mapping" target="_blank">ECF mapping</a>.
</p>

<p>
    This application bundle contains two ECs:
    <ul>
    	<li>
    		<code>ChatEvent</code> class that sends an event when the user wants to create or delete a chat room.
    	</li>
    	<li>
    		<code>Message</code> class that sends an event containing the name of the target chat room and the message text.
    	</li>
    </ul>
    
    The bundle also contains a utility object for enumeration that defines event types.
</p>

<h2>Manage ECFs</h2>

To view information about the ECFs:

<ol>
   	<li>
   		Log in to the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#administration-ui" target="_blank">Administration UI</a> as a tenant administrator using the default <b>admin</b> username and <b>admin123</b> password.
   	</li>
   	<li>
   		Open the <b>Event class families</b> page.
   		Here you can add an ECF or view details of the existing ECFs.
	
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_00.png" />
		<br />
		<br />
		
	</li>
	<li>
		Select the <b>Chat</b> ECF that is used for this sample application bundle.
		The <b>Event class family details</b> page will open.

		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_0.png" />
		<br />
		<br />
	</li>
	<li>
		Select the ECF version from the <b>Versions</b> section.
		The <b>Family version</b> page will open containing the list of event classes.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_1.png" />
		<br />
		<br />
		
		To view EC details, select the EC from the list.
		The <b>Event class details</b> page will open where you can see the schema used for specific EC.
	</li>
</ol>

<p>
    This is the JSON schema used for <code>ChatEvent</code> EC.
    It includes a nested record with a special type named <b>ChatEventType</b>.

	<pre>
		{
		  "type": "record",
		  "name": "ChatEvent",
		  "namespace": "org.kaaproject.kaa.examples.event",
		  "fields": [
			{
			  "name": "ChatName",
			  "type": {
				"type": "string",
				"avro.java.string": "String"
			  }
			},
			{
			  "name": "EventType",
			  "type": {
				"type": "enum",
				"name": "ChatEventType",
				"symbols": [
				  "CREATE",
				  "DELETE"
				],
				"classType": "object"
			  }
			}
		  ],
		  "description": "",
		  "classType": "event"
		}
	</pre>

</p>

<p>
    This is the JSON schema used for <code>Message</code> EC.

	<pre>
		{
		  "type": "record",
		  "name": "Message",
		  "namespace": "org.kaaproject.kaa.examples.event",
		  "fields": [
			{
			  "name": "ChatName",
			  "type": {
				"type": "string",
				"avro.java.string": "String"
			  }
			},
			{
			  "name": "Message",
			  "type": {
				"type": "string",
				"avro.java.string": "String"
			  }
			}
		  ],
		  "description": "",
		  "classType": "event"
		}
	</pre>

</p>

<p>
	For more information, see <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#manage-events-using-administration-ui" target="_blank">Manage events using Administration UI</a>.
</p>

<h2>Set up ECF mapping</h2>

To set up an ECF mapping:

<ol>
   	<li>
   		Log in to the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#administration-ui" target="_blank">Administration UI</a> as a tenant developer using the default <b>devuser</b> username and <b>devuser123</b> password.
   	</li>
   	<li>
   		Click <b>Applications</b> > <b>Event demo</b> > <b>Event family mappings</b>.
	
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_3.png" />
		<br />
		<br />
		
		You can select a mapping from the list to view the details.
	</li>
	<li>
		Click <b>Add event family mapping</b>.
		The <b>Event family mapping details</b> page will open.
		
		<br />
		<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_5.png" />
		<br />
		<br />
		
		Select the event class family.
		Now you can edit the ECF mapping by changing the value in the <b>Action</b> column.
		<br>
		<br>
		Note that an ECF mapping applies to a specific application.
		This means that multiple applications can use the same ECF mapped differently for each application.
	</li>
</ol>

<h2>Add user verifier</h2>

<p>
	Endpoints can exchange messages between one another, if they belong to the same user.
	<a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#owner-verifiers" target="_blank">User verifiers</a> are used in Kaa to check user credentials.
	You can use a number of user verifiers, but for the purpose of this sample application a <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#trustful-owner-verifier" target="_blank">trustful user verifier</a> will be used.
	This verifier will accept any user credentials.
</p>

<p>
    To add a user verifier:
    <ol>
    	<li>
    		Open the <b>User verifiers</b> page of the application and click <b>Add user verifier</b>.
    		
			<br />
			<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_6.png" />
			<br />
			<br />
    		
    	</li>
    	<li>
    		On the <b>User verifier details</b> page, enter a name and select the user verifier type.
    		For this example, select the <b>Trustful verifier</b> type.
    		
    		<br />
			<img src="https://raw.github.com/hunch7/sample-apps/app-274-events-bundle/eventdemo/resources/pic/event_demo_7.png" />
			<br />
			<br />
    		
			When you finish entering the user verifier details, click <b>Add</b>.
    	</li>
    </ol>

<h2>Start application</h2>
    
<p>
	Download the binaries/sources for the target platform and start the application.
	To do this, choose the target platform below and follow the instructions on the dedicated page.
</p>

<p>
	Note that you need to unpack the application files in three different folders, one for each of the three endpoints used in the example.
	This is required to avoid overwriting the security files.
</p>

<p>
	Start your first endpoint.
	The console will display the following messages.
	
	<pre>
		2016-08-31 16:38:19,566 [main] INFO  o.k.kaa.demo.event.EventDemo - Event demo started
		2016-08-31 16:38:21,639 [pool-2-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Kaa client started
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:
		
		"Living room"
		"Guest room"
		
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select your option:
		
		1. Join chat room.
		2. Create chat room.
		3. Delete chat room.
		4. Exit application.
	</pre>
</p>

<p>
	To join a chat room, type <b>1</b> and press Enter.
	Then, enter the name of the chat room you want to join and press Enter.

	<pre>
		...
		1
	
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Enter chat room name: Living room
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Joined "Living room" chat.
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Type message and press Enter to send it or type "quit" to leave this chat.
	</pre>

</p>
	
<p>
    Now launch the second and third endpoints.
    On the second endpoint, join the <b>Living room</b> chat, same as you did for your first endpoint.
    On the third endpoint, join the <b>Guest room</b> chat.
</p>

<p>
    On the first endpoint, send a message in the <b>Living room</b> chat.
    Notice that only the second endpoint received the chat message because it's in the same chat room as the first endpoint.
</p>

<p>
	When you send a message from an endpoint, it uses the event listener to broadcast a <b>Message</b> event containing the message text and the name of the target chat room.
	This event will be received by all endpoints registered under the same user, but the message text will only be displayed for the endpoints that are in the target chat room.
</p>

<p>
    On the first endpoint, leave the <b>Living room</b> chat and joint the <b>Guest room</b> chat and send a message.
    Only the third endpoint will receive the message.
</p>

<p>
    Let's leave the chat room and create a new one.
    See example below.

	<pre>
		...
		"quit"
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:
	
		"Living room"
		"Guest room"
	
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select your option:
	
		1. Join chat room.
		2. Create chat room.
		3. Delete chat room.
		4. Exit application.
	
		1
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Enter new chat name:
	
		Roof chat
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of chat rooms updated.
		016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:
	
		"Living room"
		"Guest room"
		"Roof chat"
	
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select your option:
	
		1. Join chat room.
		2. Create chat room.
		3. Delete chat room.
		4. Exit application.
	</pre>
	
	The list of available chat rooms will be updated on all endpoint.
</p>

<p>
    Let's delete a chat room.
    See example below.

	<pre>
		...
		"quit"
	
		016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:
	
		"Living room"
		"Guest room"
		"Roof chat"
	
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select your option:
	
		1. Join chat room.
		2. Create chat room.
		3. Delete chat room.
		4. Exit application.
	
		3
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Enter name of the chat you want to delete:
	
		Roof chat
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of chat rooms updated.
		016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:
	
		"Living room"
		"Guest room"
	
		2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select your option:
	
		1. Join chat room.
		2. Create chat room.
		3. Delete chat room.
		4. Exit application.
	</pre>
</p>
            ]]>
        </details>
    </bundle>
</projectsConfig>