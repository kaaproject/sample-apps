<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="event_demo_java">
        <name>Event Java demo</name>
        <description>Kaa Event subsystem demo app based on Java SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the Java SDK.

<h2>Installation</h2>
Download the jar file to your device by clicking the "Binary" button on the left. Make sure that you have Java installed on your device. Run the application using the following command in the console:
<pre>
$ java -jar EventDemo.jar
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event Java demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.<br/><br/>

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event Java demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>java/event_demo.tar.gz</sourceArchive>
        <projectFolder>JEventDemo</projectFolder>
        <sdkLibDir>JEventDemo/lib</sdkLibDir>
        <destBinaryFile>JEventDemo/build/jar/EventDemo.jar</destBinaryFile>
    </project>
    <project id="event_demo_c">
        <name>Event C demo</name>
        <description>Kaa Event subsystem demo app based on C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event C demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.<br/><br/>

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event C demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>c/event_demo.tar.gz</sourceArchive>
        <projectFolder>CEventDemo</projectFolder>
        <sdkLibDir>CEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_cpp">
        <name>Event C++ demo</name>
        <description>Kaa Event subsystem demo app based on C++ SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the C++ SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event C++ demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event C++ demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>cpp/event_demo.tar.gz</sourceArchive>
        <projectFolder>CppEventDemo</projectFolder>
        <sdkLibDir>CppEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_objc">
        <name>Event Objective-C demo</name>
        <description>Kaa Event subsystem demo app based on Objective-C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the Objective-C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event Objective-C demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event Objective-C demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>objc/event_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCEventDemo</projectFolder>
        <sdkLibDir>ObjCEventDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="event_demos">
        <name>Event demos</name>
        <description>Kaa Event subsystem demo applications bundle</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrates capabilities of the Kaa Event subsystem.

Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.

<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Messaging+across+endpoints">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Events">design reference</a> sections.
]]>
        </details>
    </bundle>
</projectsConfig>