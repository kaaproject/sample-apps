<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="gpio_master">
        <name>GPIO control Android</name>
        <description>GPIO control Android app</description>
        <details>
            <![CDATA[
This app demonstrates capabilities of the Kaa Event subsystem on Android.
<h2>Installation</h2>
Download the .apk to your Android device by clicking the "Binary" button on the left. Make sure that the device permits installing apps from "Unknown sources". Open the downloaded apk and follow the on-screen instructions.
<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. You will need to install this application on at least one Android-powered device and one ESP8266- or CC32XX-powered device.

After you have configured and started the application on ESP8266 or CC32XX (You can read about its installation in “GPIO control ESP8266” and “GPIO control CC32XX” Kaa Sandbox apps), start the application on the Android device and press the "+" button on the right bottom of the screen. Enter the endpoint acess token (the default values are "cc3200" for CC3200 and "esp8266" for ESP8266). No other data is needed because <a href="http://docs.kaaproject.org/display/KAA/Attaching+endpoints+to+users#Attachingendpointstousers-Trustfuluserverifier">trustful user verifier</a> is used for demonstration purposes.<br/><br/>
Then, click on the appeared device and try to toggle the switches.
Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.
<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Messaging+across+endpoints">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Events">design reference</a> sections.
]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>ANDROID</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>android/gpiocontrol.tar.gz</sourceArchive>
        <projectFolder>gpiocontrol/gpiocontrol</projectFolder>
        <sdkLibDir>gpiocontrol/gpiocontrol/libs</sdkLibDir>
        <destBinaryFile>gpiocontrol/gpiocontrol/bin/gpiocontrol-debug.apk</destBinaryFile>
    </project>

    <project id="gpio_slave_cc">
        <name>GPIO control CC32XX</name>
        <description>GPIO control CC3200 app that demonstrates capabilities of the Kaa Event subsystem</description>
        <details>
            <![CDATA[
<h2>Installation</h2>
First, read our <a href="http://docs.kaaproject.org/display/KAA/Texas+Instruments+CC3200">documentation article</a> on how to integrate Kaa with CC3200.
<h2>Playing around</h2>
After you successfully installed this app on your CC32XX device, go to "GPIO control Android" Sandbox app and follow the steps described there.
]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>CC32XX</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>c/gpio-cc-client.tar.gz</sourceArchive>
        <projectFolder>gpio-cc-client</projectFolder>
        <sdkLibDir>gpio-cc-client/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="gpio_slave_esp">
        <name>GPIO control ESP8266</name>
        <description>GPIO control ESP8266 app that demonstrates capabilities of the Kaa Event subsystem</description>
        <details>
            <![CDATA[
            <h2>Installation</h2>
First, read our <a href="http://docs.kaaproject.org/display/KAA/ESP8266">documentation article</a> on how to integrate Kaa with ESP8266.
<h2>Playing around</h2>
After you successfully installed this app on your ESP8266 device, go to "GPIO control Android" Sandbox app and follow the steps described there.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>ESP8266</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>c/gpio-esp-client.tar.gz</sourceArchive>
        <projectFolder>gpio-esp-client</projectFolder>
        <sdkLibDir>gpio-esp-client/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="gpio_slave_artik5">
        <name>GPIO control Artik 5</name>
        <description>GPIO control Artik 5 app that demonstrates capabilities of the Kaa Event subsystem</description>
        <details>
            <![CDATA[
            <h2>Installation</h2>
First, read our <a href="http://docs.kaaproject.org/display/KAA/Samsung+Artik+5">documentation article</a> on how to integrate Kaa with Artik 5.
<h2>Playing around</h2>
After you successfully installed this app on your Artik 5 device, go to "GPIO control Android" or "GPIO control iOS" Sandbox app and follow the steps described there.
            ]]>
        </details>
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>ARTIK5</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>cpp/gpio-artik5-client.tar.gz</sourceArchive>
        <projectFolder>gpio-artik5-client</projectFolder>
        <sdkLibDir>gpio-artik5-client/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="gpio_master_objc">
        <name>GPIO control iOS</name>
        <description>GPIO control iOS app</description>
        <details>
            <![CDATA[
This app demonstrates capabilities of the Kaa Event subsystem on iOS.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. You will need to install this application on at least one iOS device and one ESP8266- or CC32XX-powered device.

After you have configured and started the application on ESP8266 or CC32XX (You can read about its installation in “GPIO control ESP8266” and “GPIO control CC32XX” Kaa Sandbox apps), start the application on the iOS device and press the "+" button on the right bottom of the screen. Enter the endpoint acess token (the default values are "cc3200" for CC3200 and "esp8266" for ESP8266). No other data is needed because <a href="http://docs.kaaproject.org/display/KAA/Attaching+endpoints+to+users#Attachingendpointstousers-Trustfuluserverifier">trustful user verifier</a> is used for demonstration purposes.<br/><br/>
Then, click on the appeared device and try to toggle the switches.
Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.
<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Messaging+across+endpoints">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Events">design reference</a> sections.
]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>objc/gpiocontrol.tar.gz</sourceArchive>
        <projectFolder>gpiocontrol</projectFolder>
        <sdkLibDir>gpiocontrol/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="gpio_control">
        <name>GPIO control</name>
        <description>GPIO control applications bundle</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrates capabilities of the Kaa Event subsystem.

Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.
<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Messaging+across+endpoints">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Events">design reference</a> sections.
]]>
        </details>
    </bundle>
</projectsConfig>
