<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="gpiocontrol_demo_android_master">
        <name>GPIO control Android</name>
        <description>GPIO control Android app</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Events" target="_blank">Events extension</a> based on <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#sdk-type" target="_blank">Android</a>.
	This extension enables <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#endpoint-ep" target="_blank">endpoints</a> to exchange messages with one another through <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#kaa-server" target="_blank">Kaa server</a>.
</p>

<h1>Launching</h1>

<p>
	For sample applications that run on Android, both the binary files (.apk package) and the source code (.tar.gz archive) are available for download.
	If you want to only launch the sample application, download the binary files.
	If you want to explore the source code of the sample application, download the source code archive.
</p>

<h2>Install using the binary files</h2>

To install this sample application using the binary files:
	
<ol>
	<li>
		Click the <b>Binary</b> button.
		A binary build window will open.
		Click <b>Ok</b> and download the .apk file.
	</li>
	<li>
		<p>
			<b>Android</b>
			<br />
			Copy the .apk file to your Android device and open it to install.
			The sample application console will display the startup message.
		</p>
		<p>
			<b>Windows</b>
			<br />
			Connect the Android device to your Windows machine and run the following command from the sdk/platform-tools directory.
<pre>
adb install <path_to_the_apk>/app-debug.apk
</pre>
		</p>
		<p>
			<b>Linux</b>
			<br />
			Connect the Android device to your Linux machine and run the following command from the sdk/platform-tools directory.
<pre>
./adb install <path_to_the_apk>/app-debug.apk
</pre>
		</p>
	</li>
</ol>

<h2>Install using the source code</h2>

To install this sample application using the source code:

<ol>
	<li>
		Install Android SDK version 25.0.0 on your host machine using <a href="https://developer.android.com/studio/index.html#downloads" target="_blank">Android Studio</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		Note that <b>%PATH_TO_ANDROID_SDK%</b> should be replaced by the Android SDK installation path.
		
<pre>
export ANDROID_HOME=%PATH_TO_ANDROID_SDK%
./gradlew assembleDebug
</pre>
		
		The .apk file will be created in the app/build/outputs/apk/ directory.
	</li>
	<li>
		Follow the installation instructions described in the <b>Install using the binary files</b> section.
	</li>
</ol>
	
If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Your-first-Kaa-application/" target="_blank">Your first Kaa application</a>.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>ANDROID</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>android-master/gpiocontrol_demo.tar.gz</sourceArchive>
        <projectFolder>gpiocontrol/GpioControl</projectFolder>
        <sdkLibDir>gpiocontrol/GpioControl/app/libs</sdkLibDir>
        <destBinaryFile>gpiocontrol/GpioControl/app/build/outputs/apk/gpiocontrol.apk</destBinaryFile>
    </project>

    <project id="gpiocontrol_demo_c_slave">
        <name>GPIO control C</name>
        <description>GPIO control C app that demonstrates capabilities of the Kaa Event subsystem</description>
        <details>
            <![CDATA[
<h2>Installation</h2>
First, read our <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C/SDK-TI-CC3200/" target="_blank">documentation section</a> on how to integrate Kaa with CC3200.
<h2>Playing around</h2>
After you successfully installed this app on your CC32XX device, go to "GPIO control Android" Sandbox app and follow the steps described there.
]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86 CC32XX ESP8266</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>c-slave/gpiocontrol_demo.tar.gz</sourceArchive>
        <projectFolder>gpio-c-client</projectFolder>
        <sdkLibDir>gpio-c-client/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="gpiocontrol_demo_cpp_slave">
        <name>GPIO control CPP</name>
        <description>GPIO control CPP app that demonstrates capabilities of the Kaa Event subsystem</description>
        <details>
            <![CDATA[
<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ cmake ..
</pre>
<h2>Playing around</h2>
After you successfully installed this app on your device, go to "GPIO control Android" or "GPIO control iOS" Sandbox app and follow the steps described there.
            ]]>
        </details>
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project
         (ex. JAVA, CPP, etc., to get list of all possible options
         see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
        
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
         (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
         see 'platform' type in demo_projects_schema.xsd schema) -->
        
        <platforms>LINUX_X86</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>cpp-slave/gpiocontrol_demo.tar.gz</sourceArchive>
        <projectFolder>gpio-cpp-client</projectFolder>
        <sdkLibDir>gpio-cpp-client/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="gpiocontrol_demo_artik5_slave">
        <name>GPIO control Artik 5</name>
        <description>GPIO control Artik 5 app that demonstrates capabilities of the Kaa Event subsystem</description>
        <details>
            <![CDATA[
            <h2>Installation</h2>
First, read our <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Using-Kaa-endpoint-SDKs/C++/SDK-Samsung-Artik-5/" target="_blank">documentation article</a> on how to integrate Kaa with Artik 5.
<h2>Playing around</h2>
After you successfully installed this app on your Artik 5 device, go to "GPIO control Android" or "GPIO control iOS" Sandbox app and follow the steps described there.
            ]]>
        </details>
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>ARTIK5</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>artik5-slave/gpiocontrol_demo.tar.gz</sourceArchive>
        <projectFolder>gpio-artik5-client</projectFolder>
        <sdkLibDir>gpio-artik5-client/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="gpiocontrol_demo_objc_master">
        <name>GPIO control iOS</name>
        <description>GPIO control iOS app</description>
        <details>
            <![CDATA[
This app demonstrates capabilities of the Kaa Event subsystem on iOS.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. You will need to install this application on at least one iOS device and one ESP8266- or CC32XX-powered device.

After you have configured and started the application on ESP8266 or CC32XX (You can read about its installation in “GPIO control ESP8266” and “GPIO control CC32XX” Kaa Sandbox apps), start the application on the iOS device and press the "+" button on the right bottom of the screen. Enter the endpoint acess token (the default values are "cc3200" for CC3200 and "esp8266" for ESP8266). No other data is needed because <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Endpoint-ownership/#trustful-owner-verifier" target="_blank">trustful user verifier</a> is used for demonstration purposes.<br/><br/>
Then, click on the appeared device and try to toggle the switches.
Please note that all the features of <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a> are also supported by <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Server-REST-APIs/" target="_blank">REST API</a>.
<h2>What's next?</h2>
For more information, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Events/" target="_blank">Events</a> documentation section.
]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>gpio_control</bundleId>
        <sourceArchive>objc-master/gpiocontrol_demo.tar.gz</sourceArchive>
        <projectFolder>gpiocontrol</projectFolder>
        <sdkLibDir>gpiocontrol/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="gpio_control">
        <name>GPIO control demos</name>
        <description>GPIO control applications bundle</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrates capabilities of the Kaa Event subsystem.

Please note that all the features of <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a> are also supported by <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Server-REST-APIs/" target="_blank">REST API</a>.
<h2>What's next?</h2>
For more information, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Events/" target="_blank">Events</a> documentation section.
]]>
        </details>
    </bundle>
</projectsConfig>
