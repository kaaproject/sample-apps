import os
import sys

from lxml import etree
from lxml.builder import E

'''
1) Check sample-apps project structure
2) Parse excludes from pom.xml of sample apps project
3) For every sample-app project
4.1) For every sample-app sub project
4.1.1) Check assembly folder
4.1.2) Find corresponding info in the projects.xml
4.1.3) Create and add new tags for resulting pom.xml
5) Open pom.xml
6) Find necessary places and insert new tags there
'''

COMMENT_AUTOGENERATED = 'AUTOGENERATED'

ASSEMBLY_DIRECTORY = 'assembly'
ASSEMBLY_FILE_NAME_SRC = 'src'
ASSEMBLY_FILE_SEPARATOR = '-'
ASSEMBLY_ID = 'id'


def insert_comment(element, comment_str):
    '''
    Inserts comment in the element
    '''

    comment = etree.Comment(' ' + comment_str + ' ')
    element.append(comment)


def dependency_bundle(name):
    '''
    Generates dependency tag like this:
    <dependency>
        <groupId>org.kaaproject.kaa.examples</groupId>
        <artifactId>cellmonitordemo</artifactId>
        <version>${kaa-sample-apps.version}</version>
    </dependency>
    '''
    print('[INFO] Creating new dependency tag for bundle=%s' % name)

    return E.dependency(
        etree.Comment(COMMENT_AUTOGENERATED),
        E.groupId('org.kaaproject.kaa.examples'),
        E.artifactId(name + 'demo'),
        E.version('${kaa-sample-apps.version}')
    )


def dependency(name, suffix):
    '''
    Generates dependency tag like this:
    <dependency>
        <groupId>org.kaaproject.kaa.examples</groupId>
        <artifactId>profilingdemo</artifactId>
        <version>${kaa-sample-apps.version}</version>
        <classifier>profiling-src-cpp</classifier>
        <type>tar.gz</type>
        <scope>provided</scope>
    </dependency>
    '''

    print('[INFO] Creating new dependency tag for name=%s, suffix=%s' %
          (name, suffix))

    return E.dependency(
        etree.Comment(COMMENT_AUTOGENERATED),
        E.groupId('org.kaaproject.kaa.examples'),
        E.artifactId(name + 'demo'),
        E.version('${kaa-sample-apps.version}'),
        E.classifier(name + '-src-' + suffix),
        E.type('tar.gz'),
        E.scope('provided')
    )


def artifact_item(name, suffix):
    '''
    Creates simple artifactItem tag like this:
    <artifactItem>
        <groupId>org.kaaproject.kaa.examples</groupId>
        <artifactId>profilingdemo</artifactId>
        <version>${kaa-sample-apps.version}</version>
        <classifier>profiling-src-objc</classifier>
        <type>tar.gz</type>
        <overWrite>false</overWrite>
        <outputDirectory>${base.path}/demo_projects/objc</outputDirectory>
        <destFileName>profiling_demo.tar.gz</destFileName>
    </artifactItem>
    '''

    print('[INFO] Creating new artifactItem tag for name=%s, suffix=%s' %
          (name, suffix))

    return E.artifact_item(
        etree.Comment(COMMENT_AUTOGENERATED),
        E.groupId('org.kaaproject.kaa.examples'),
        E.artifactId(name + 'demo'),
        E.version('${kaa-sample-apps.version}'),
        E.classifier(name + '-src-' + suffix),
        E.type('tar.gz'),
        E.overWrite('false'),
        E.outputDirectory('${base.path}/demo_projects/' + suffix),
        E.destFileName(name + '_demo.tar.gz')
    )


def parse_sample_apps(path):

    sample_apps_tree = etree.parse(os.path.join(path, 'pom.xml'))

    excludeSamples = sample_apps_tree.xpath('//*[contains(local-name(), "properties")]' +
                                            '/*[contains(local-name(), "excludeSamples")]')[0] \
        .text \
        .split(',')

    excludeSamples = [x.strip() for x in excludeSamples]

    print('[INFO] Exclude: %s' % excludeSamples)

    demo_projects_dependencies = []
    demo_projects_artifact_items = []

    for directory in os.listdir(path):
        dirpath = os.path.join(path, directory)
        if not os.path.isdir(dirpath):  # filter files
            print('[INFO] Not directory, skip: %s' % dirpath)
            continue
        if directory[0] == '.':  # filter .idea, .git etc.
            print('[INFO] Directory starts with ".", skip: %s' % dirpath)
            continue

        sub_directories = os.listdir(dirpath)

        name = dirpath.split(os.sep)[-1]

        if name in excludeSamples:
            print('[WARN] Sample %s is excluded!' % name)
            continue

        print('[INFO] Name: %s' % name)

        if ASSEMBLY_DIRECTORY in sub_directories:
            print('[INFO] Directory: %s' % dirpath)

            demo_projects_dependencies.append(etree.Comment(
                'Generated dependencies for %s demo' % name))
            demo_projects_artifact_items.append(etree.Comment(
                'Generated artifact items for %s demo' % name))

            bundle_dependencies = []

            assembly_files_dir = os.path.join(dirpath, ASSEMBLY_DIRECTORY)
            for assembly_file in os.listdir(assembly_files_dir):

                assembly_file_path = os.path.join(
                    assembly_files_dir, assembly_file)

                # filter not files
                if not os.path.isfile(assembly_file_path):
                    continue

                # filter files without 'src' in name
                if not ASSEMBLY_FILE_NAME_SRC in assembly_file:
                    continue

                if ASSEMBLY_FILE_SEPARATOR in assembly_file:

                    # cut off .xml
                    assembly_file_name = assembly_file.split('.')[0]

                    splitted = assembly_file_name.split(
                        ASSEMBLY_FILE_SEPARATOR, 1)

                    try:
                        index_of_suffix = splitted.index(
                            ASSEMBLY_FILE_NAME_SRC) + 1
                    except ValueError:
                        error = '[ERROR] Wrong format: %s' % assembly_file_name
                        print(error)
                        sys.exit(error)

                    suffix = splitted[index_of_suffix]

                    print('[INFO] Assembly demo (' + assembly_file_name + '): ' + suffix)

                    bundle_dependencies.append(dependency(name, suffix))
                    demo_projects_artifact_items.append(
                        artifact_item(name, suffix))

                else:
                    error = '[ERROR] No separator(\' - \') in the assembly file'
                    print(error)
                    sys.exit(error)

            print('[INFO] Appending bundle dependency for %s' % name)
            demo_projects_dependencies.append(dependency_bundle(name))

            demo_projects_dependencies.extend(bundle_dependencies)

    return (demo_projects_dependencies, demo_projects_artifact_items)


def insert_dependencies_into_pom(pom_tree, dependencies):
    print('[INFO] Inserting dependencies')

    dependencies_elements = pom_tree.xpath(
        '//*[contains(local-name(), "dependencies")]') # take first dependencies tag

    dependencies_element = dependencies_elements[0]

    for element in dependencies:
        dependencies_element.append(element)


def insert_artifact_items_into_pom(pom_tree, artifact_items):
    print('[INFO] Inserting artifact items')

    # XPath contains something like
    # /*[contains(local-name(), "SOME_NAME")]
    # since there is prefixes and namespaces
    # and name won't be equals, it just contains some word
    artifact_items_elements = pom_tree.xpath(
        '//*[contains(local-name(), "build")]' + # build
        '/*[contains(local-name(), "plugins")]' + # plugins
        # plugin (with tag groupId=org.apache.maven.plugins and tag=artifactId=maven-dependency-plugin)
        '/*[contains(local-name(), "plugin")][*[contains(local-name(), "groupId")][text()="org.apache.maven.plugins"] and *[contains(local-name(), "artifactId")][text()="maven-dependency-plugin"]]' + # too long line
        '/*[contains(local-name(), "executions")]' + # executions
        # execution (with tag id=copy)
        '/*[contains(local-name(), "execution")][*[contains(local-name(), "id")][text()="copy"]]' +
        '/*[contains(local-name(), "configuration")]' + # configuration
        '/*[contains(local-name(), "artifactItems")]') # finally, artifactItems

    artifact_items_element = artifact_items_elements[0] # take first

    for element in artifact_items:
        artifact_items_element.append(element)


def generate_pom_xml(elements_tuple, source_pom_path):

    print('[INFO] Parsing existing pom.xml')

    # For pretty printing output
    # http://stackoverflow.com/a/7904066/4142087
    parser = etree.XMLParser(remove_blank_text=True)

    pom_tree = etree.parse(source_pom_path, parser)

    print('[INFO] Starting to generate pom.xml')

    dependencies, artifact_items = elements_tuple

    insert_dependencies_into_pom(pom_tree, dependencies)

    insert_artifact_items_into_pom(pom_tree, artifact_items)

    return pom_tree


def write_document(doc, target_pom_path):

    print('[INFO] Writing document to the pom.xml')

    doc.write(target_pom_path, xml_declaration=True,
              encoding='utf-8', pretty_print=True)


def main(sample_apps_path, source_pom_path, target_pom_path):

    print('[INFO] Script is started with args: sample_apps_path=%s, source_pom_path=%s, target_pom_path=%s' %
          (sample_apps_path, source_pom_path, target_pom_path))

    elements_tuple = parse_sample_apps(sample_apps_path)

    write_document(generate_pom_xml(
        elements_tuple, source_pom_path), target_pom_path)


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
