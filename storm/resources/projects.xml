<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
Copyright 2014-2016 CyberVision, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<projectsConfig
        xmlns="http://www.kaaproject.org"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="storm_demo_java">
        <name>Storm data analytics Java demo</name>
        <description>IoT real-time data processing in Apache Storm using Kaa</description>
        <details><![CDATA[
This application demonstrates real-time data processing in Apache Storm using Kaa platform, and Kaa Java SDK-based client application. <br /> <br />
Storm receives log data from Kaa clients via the Kaa Flume log appender as a Flume event and then prints this data. <br />
To learn more about Storm basics such as a spout, a bolt, etc., please refer to the <a href="https://storm.apache.org/documentation/Tutorial.html">official
Apache Storm tutorial</a>.

<h2>Installation</h2>
1. Download the source code by clicking the "Source" button on the left and unpack the downloaded archive. <br />
2. Go to the KaaStormServer folder and run server side Storm application by executing folowing command (we assume you have JDK 1.8 and Maven 3.0+ installed):
<pre>
$ mvn clean install
</pre>
3. After the following message appears:
<pre>
[INFO] BUILD SUCCESS
</pre>
Run:
<pre>
$ java -jar target/storm-server-example.jar
</pre>
If no errors occurred, you’ve successfully started the Storm topology. <br />
4. Configure Flume log appender via the
<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a>
of your Kaa Sandbox. As a tenant admin, go to the
"Storm data analytics demo application >> Log Appenders >> Storm data analytics demo log appender"
and change host parameter from <b>"localhost"</b> to <b>Storm server host address</b>
(<b>if you run Storm locally, this will be the external IP of your computer</b>). Click Save button. <br />
5. Go to JStormDataAnalyticsDemo folder of your unpacked archive and execute command:
<pre>
$ mvn clean install
</pre>
6. Launch the Storm data analytics demo application using the following command:
<pre>
$ java -jar target/storm-client-example.jar
</pre>
7. Now look at the Storm server output. You will see the following lines:
<pre>
...
Sample zone ID: 9, panel ID: 7, power: 68.49944021603773
...
Total records received: 1
Total samples received: 100
…
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Storm data analytics demo" application, you will receive statistics values from
the endpoint in your server side application.
            ]]>
        </details>
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>JAVA</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>ADVANCED</complexity>
        <bundleId>storm_demos</bundleId>
        <sourceArchive>java/storm_demo.tar.gz</sourceArchive>
        <projectFolder>JStormDataAnalyticsDemo</projectFolder>
        <sdkLibDir>JStormDataAnalyticsDemo/lib</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="storm_demo_c">
        <name>Storm data analytics C demo</name>
        <description>IoT real-time data processing in Storm using Kaa</description>
        <details><![CDATA[
This application demonstrates real-time data processing in Apache Storm using Kaa platform, and Kaa С SDK-based client application. <br /> <br />
Storm receives log data from Kaa clients via the Kaa Flume log appender as a Flume event and then prints this data. <br />
To learn more about Storm basics such as a spout, a bolt, etc., please refer to the <a href="https://storm.apache.org/documentation/Tutorial.html">official
Apache Storm tutorial</a>.

<h2>Installation</h2>
1. Download the source code by clicking the "Source" button on the left and unpack the downloaded archive. <br />
2. Go to the KaaStormServer folder and run server side Storm application by executing folowing command (we assume you have JDK 1.8 and Maven 3.0+ installed):
<pre>
$ mvn clean install
</pre>
3. After the following message appears:
<pre>
[INFO] BUILD SUCCESS
</pre>
Run:
<pre>
$ java -jar target/storm-server-example.jar
</pre>
If no errors occurred, you’ve successfully started the Storm topology. <br />
4. Configure Flume log appender via the
<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a>
of your Kaa Sandbox. As a tenant developer, go to the
"Storm data analytics demo application >> Log Appenders >> Storm data analytics demo log appender"
and change host parameter from <b>"localhost"</b> to <b>Storm server host address</b>
(<b>if you run Storm locally, this will be the external IP of your computer</b>). Click Save button. <br />
5. Go to CStormAnalyticsDemo folder of your unpacked archive and execute command:
<pre>
$ ./build.sh deploy
</pre>
6. Now look at the Storm server output. You will see the following lines:
<pre>
...
Sample zone ID: 9, panel ID: 7, power: 68.49944021603773
...
Total records received: 1
Total samples received: 100
…
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Storm data analytics demo" application, you will receive statistics values from
the endpoint in your server side application.
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>C</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>ADVANCED</complexity>
        <bundleId>storm_demos</bundleId>
        <sourceArchive>c/storm_demo.tar.gz</sourceArchive>
        <projectFolder>CStormDataAnalyticsDemo</projectFolder>
        <sdkLibDir>CStormDataAnalyticsDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="storm_demo_cpp">
        <name>Storm data analytics C++ demo</name>
        <description>IoT real-time data processing in Storm using Kaa</description>
        <details><![CDATA[
This application demonstrates real-time data processing in Apache Storm using Kaa platform, and Kaa С++ SDK-based client application. <br /> <br />
Storm receives log data from Kaa clients via the Kaa Flume log appender as a Flume event and then prints this data. <br />
To learn more about Storm basics such as a spout, a bolt, etc., please refer to the <a href="https://storm.apache.org/documentation/Tutorial.html">official
Apache Storm tutorial</a>.

<h2>Installation</h2>
1. Download the source code by clicking the "Source" button on the left and unpack the downloaded archive. <br />
2. Go to the KaaStormServer folder and run server side Storm application by executing folowing command (we assume you have JDK 1.8 and Maven 3.0+ installed):
<pre>
$ mvn clean install
</pre>
3. After the following message appears:
<pre>
[INFO] BUILD SUCCESS
</pre>
Run:
<pre>
$ java -jar target/storm-server-example.jar
</pre>
If no errors occurred, you’ve successfully started the Storm topology. <br />
4. Configure Flume log appender via the
<a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a>
of your Kaa Sandbox. As a tenant developer, go to the
"Storm data analytics demo application >> Log Appenders >> Storm data analytics demo log appender"
and change host parameter from <b>"localhost"</b> to <b>Storm server host address</b>
(<b>if you run Storm locally, this will be the external IP of your computer</b>). Click Save button. <br />
5. Go to CppStormAnalyticsDemo folder of your unpacked archive and execute command:
<pre>
$ ./build.sh deploy
</pre>
6. Now look at the Storm server output. You will see the following lines:
<pre>
...
Sample zone ID: 9, panel ID: 7, power: 68.49944021603773
...
Total records received: 1
Total samples received: 100
…
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Storm data analytics demo" application, you will receive statistics values from
the endpoint in your server side application.
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>CPP</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86</platforms>
        <features>DATA_COLLECTION</features>
        <complexity>ADVANCED</complexity>
        <bundleId>storm_demos</bundleId>
        <sourceArchive>cpp/storm_demo.tar.gz</sourceArchive>
        <projectFolder>CppStormDataAnalyticsDemo</projectFolder>
        <sdkLibDir>CppStormDataAnalyticsDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="storm_demos">
        <name>Storm data analytics demos</name>
        <description>IoT real-time data processing in Storm using Kaa</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrate real-time data processing in Apache Storm using Kaa platform.

Please note that all the features of <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Glossary/#administration-ui" target="_blank">Administration UI</a> are also supported by <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Server-REST-APIs/" target="_blank">REST API</a>.

<h2>What's next?</h2>
For more background on the Kaa Logging subsystem, see <a href="http://kaaproject.github.io/kaa/docs/v0.10.0/Programming-guide/Key-platform-features/Data-collection/" target="_blank">Data collection</a> documentation page.
]]>
        </details>
    </bundle>
</projectsConfig>
